(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e17b2"],{"7b2c":function(n,e,t){"use strict";t.r(e);var a=t("7a23"),i=Object(a["o"])('<p></p><h2 id="yi-ge-fei-chang-jing-jian-ling-huo-de-liu-cheng-kong-zhi-jslei-kuang-jia" tabindex="-1"><a class="header-anchor" href="#yi-ge-fei-chang-jing-jian-ling-huo-de-liu-cheng-kong-zhi-jslei-kuang-jia">¶</a> 一个非常精简灵活的流程控制JS类框架</h2><p>​ 前段时间，由于业务需求，无意中在网上看到一篇原腾讯高级工程师张镇圳的文章<a href="https://www.qcloud.com/community/article/537217001491374183">《一个只有99行代码的JS流程框架》</a>其中感悟颇深，而且正好满足现实中的需求。</p><p>需求如下：</p><p>有A、B、C、D四个接口； A接口最先请求，B、C接口根据A接口的返回值决定是并发或者串联请求； D接口依赖于C接口，但前提条件是A接口的返回值决定是否请求； 每一次所有流程走完后(包括异步)执行某个特定的任务； 尽管上述只有4的接口(实际只有三)，用条件判断或者普通代码实现起来并不容易，而且扩展性和可阅读性都很差。但是用原作者的flowJS就能轻松而优雅的实现。由于业务需求，我对其flowJS进行了一些改写和优化。</p><p>实现要点：</p><h3 id="1-yi-zhi-liu-cheng-flowli-mian-ke-yi-you-nge-bu-zou-step" tabindex="-1"><a class="header-anchor" href="#1-yi-zhi-liu-cheng-flowli-mian-ke-yi-you-nge-bu-zou-step">¶</a> 1、一支流程flow里面可以有N个步骤step;</h3><h3 id="2-mei-ge-bu-zou-ke-yi-she-zhi-qi-zi-shen-yi-ji-qi-qian-hou-bu-zou-de-xin-xi-he-shu-ju" tabindex="-1"><a class="header-anchor" href="#2-mei-ge-bu-zou-ke-yi-she-zhi-qi-zi-shen-yi-ji-qi-qian-hou-bu-zou-de-xin-xi-he-shu-ju">¶</a> 2、每个步骤可以设置其自身以及其前后步骤的信息和数据；</h3><h3 id="3-ke-yi-yu-xian-gui-hua-hao-liu-cheng-de-mei-yi-bu-ru-this.setnext-bu-zou-a-.setnext-bu-zou-b-......" tabindex="-1"><a class="header-anchor" href="#3-ke-yi-yu-xian-gui-hua-hao-liu-cheng-de-mei-yi-bu-ru-this.setnext-bu-zou-a-.setnext-bu-zou-b-......">¶</a> 3、可以预先规划好流程的每一步，如this.setNext(&#39;步骤A&#39;).setNext(&#39;步骤B&#39;)……</h3><p>​<img src="https://img-blog.csdnimg.cn/20191112214304291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112214725562.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-ke-yi-zai-ren-he-yi-bu-jue-ding-xia-yi-bu-zuo-shi-me-ru-this.setnext-bu-zou-c" tabindex="-1"><a class="header-anchor" href="#4-ke-yi-zai-ren-he-yi-bu-jue-ding-xia-yi-bu-zuo-shi-me-ru-this.setnext-bu-zou-c">¶</a> 4、可以在任何一步决定下一步做什么，如 this.setNext(&#39;步骤C&#39;)；</h3><p><img src="https://img-blog.csdnimg.cn/20191112215013269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112215049943.png#pic_center" alt="在这里插入图片描述"></p><h3 id="5-zai-ren-he-yi-bu-zhong-ke-yi-zhi-dao-dang-qian-bu-shi-zai-zuo-shi-me-shang-yi-bu-zuo-liao-shi-me-xia-yi-bu-zuo-shi-me-ru-this.getcurr-this.getprev-this.getnext" tabindex="-1"><a class="header-anchor" href="#5-zai-ren-he-yi-bu-zhong-ke-yi-zhi-dao-dang-qian-bu-shi-zai-zuo-shi-me-shang-yi-bu-zuo-liao-shi-me-xia-yi-bu-zuo-shi-me-ru-this.getcurr-this.getprev-this.getnext">¶</a> 5、在任何一步中，可以知道当前步是在做什么，上一步做了什么、下一步做什么，如this.getCurr()、this.getPrev()、this.getNext()；</h3><p><img src="https://img-blog.csdnimg.cn/20191112215140506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112215219463.png#pic_center" alt="在这里插入图片描述"></p><h3 id="6-dang-qian-bu-zuo-wan-hou-neng-jiang-jie-guo-gao-su-xia-yi-bu-jin-jin-shi-xia-yi-bu-neng-huo-qu-dao-dang-qian-bu-chuan-di-de-jie-guo-ye-jiu-shi-wei-liao-bao-hu-bian-liang-wu-ran-mei-yi-bu-du-zhi-neng-huo-qu-dao-qian-yi-bu-de-jie-guo-ru-gei-xia-yi-bu-chuan-zhi-this.nextdata-name1-value1-name2-value2-......-huo-qu-shang-yi-bu-chuan-lai-de-zhi-this.stepdata-name1-huo-this.stepdata" tabindex="-1"><a class="header-anchor" href="#6-dang-qian-bu-zuo-wan-hou-neng-jiang-jie-guo-gao-su-xia-yi-bu-jin-jin-shi-xia-yi-bu-neng-huo-qu-dao-dang-qian-bu-chuan-di-de-jie-guo-ye-jiu-shi-wei-liao-bao-hu-bian-liang-wu-ran-mei-yi-bu-du-zhi-neng-huo-qu-dao-qian-yi-bu-de-jie-guo-ru-gei-xia-yi-bu-chuan-zhi-this.nextdata-name1-value1-name2-value2-......-huo-qu-shang-yi-bu-chuan-lai-de-zhi-this.stepdata-name1-huo-this.stepdata">¶</a> 6、当前步做完后，能将结果告诉下一步（仅仅是下一步能获取到当前步传递的结果，也就是为了保护变量污染，每一步都只能获取到前一步的结果），如 给下一步传值this.nextData({name1:value1,name2:value2,……})、获取上一步传来的值this.stepData(name1)或this.stepData()；</h3><p><img src="https://img-blog.csdnimg.cn/20191112215402646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112215435412.png#pic_center" alt="在这里插入图片描述"></p><h3 id="7-ke-yi-she-zhi-huo-huo-qu-zheng-ge-liu-cheng-de-quan-ju-bian-liang-zhe-yang-suo-you-de-bu-zou-du-neng-gong-xiang-gai-bian-liang-ru-she-zhi-quan-ju-bian-liang-zhi-this.flowdata-name1-value1-name2-value2-......-huo-qu-quan-ju-bian-liang-zhi-this.flowdata-name1-huo-this.flowdata" tabindex="-1"><a class="header-anchor" href="#7-ke-yi-she-zhi-huo-huo-qu-zheng-ge-liu-cheng-de-quan-ju-bian-liang-zhe-yang-suo-you-de-bu-zou-du-neng-gong-xiang-gai-bian-liang-ru-she-zhi-quan-ju-bian-liang-zhi-this.flowdata-name1-value1-name2-value2-......-huo-qu-quan-ju-bian-liang-zhi-this.flowdata-name1-huo-this.flowdata">¶</a> 7、可以设置或获取整个流程的全局变量，这样所有的步骤都能共享该变量，如 设置全局变量值this.flowData({name1:value1,name2:value2,……})，获取全局变量值this.flowData(name1)或this.flowData()；</h3><p><img src="https://img-blog.csdnimg.cn/20191112215549928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112215705702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="8-shang-yi-bu-ke-yi-zhi-dao-dang-qian-bu-de-zhi-xing-jie-guo-cheng-gong-or-shi-bai-ru-zai-shang-yi-bu-zhong-she-zhi-this.setnext-bu-zou-b-successfun-failfun-dang-qian-bu-zhong-tong-guo-this.success-args-this.fail-args-lai-gao-su-shang-yi-bu" tabindex="-1"><a class="header-anchor" href="#8-shang-yi-bu-ke-yi-zhi-dao-dang-qian-bu-de-zhi-xing-jie-guo-cheng-gong-or-shi-bai-ru-zai-shang-yi-bu-zhong-she-zhi-this.setnext-bu-zou-b-successfun-failfun-dang-qian-bu-zhong-tong-guo-this.success-args-this.fail-args-lai-gao-su-shang-yi-bu">¶</a> 8、上一步可以知道当前步的执行结果，成功 or 失败，如 在上一步中设置this.setNext(&#39;步骤B&#39;, successFun, failFun)、当前步中通过this.success(args)、this.fail(args)来告诉上一步；</h3><p><img src="https://img-blog.csdnimg.cn/20191112215801264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2019111221562385.png#pic_center" alt="在这里插入图片描述"></p><h3 id="9-dang-qian-bu-ke-yi-sui-shi-zhi-xing-xia-yi-bu-ru-this.next" tabindex="-1"><a class="header-anchor" href="#9-dang-qian-bu-ke-yi-sui-shi-zhi-xing-xia-yi-bu-ru-this.next">¶</a> 9、当前步可以随时执行下一步，如this.next()；</h3><p><img src="https://img-blog.csdnimg.cn/20191112215942234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112220013820.png#pic_center" alt="在这里插入图片描述"></p><h3 id="10-you-xie-bu-zou-neng-bing-xing-zhi-xing-bing-qie-yao-du-zhi-xing-wan-cai-neng-zhi-xing-xia-yi-bu-ru-this.setnext-bu-zou-a-.setnext-bu-zou-b1-bu-zou-b2-bu-zou-b3-.setnext-bu-zou-c" tabindex="-1"><a class="header-anchor" href="#10-you-xie-bu-zou-neng-bing-xing-zhi-xing-bing-qie-yao-du-zhi-xing-wan-cai-neng-zhi-xing-xia-yi-bu-ru-this.setnext-bu-zou-a-.setnext-bu-zou-b1-bu-zou-b2-bu-zou-b3-.setnext-bu-zou-c">¶</a> 10、有些步骤能并行执行，并且要都执行完才能执行下一步，如 this.setNext(&#39;步骤A&#39;).setNext([步骤B1,步骤B2,步骤B3]).setNext(&#39;步骤C&#39;)；</h3><p><img src="https://img-blog.csdnimg.cn/20191112220106785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112220141114.png#pic_center" alt="在这里插入图片描述"></p><h3 id="11-ke-yi-zai-ren-he-shi-hou-zhi-dao-dang-qian-dai-ma-liu-cheng-yun-xing-guo-de-gui-ji-ru-flowjs.trace-zhe-dui-yu-liao-jie-ye-mian-de-zhi-xing-guo-cheng-hui-bi-jiao-you-bang-zhu" tabindex="-1"><a class="header-anchor" href="#11-ke-yi-zai-ren-he-shi-hou-zhi-dao-dang-qian-dai-ma-liu-cheng-yun-xing-guo-de-gui-ji-ru-flowjs.trace-zhe-dui-yu-liao-jie-ye-mian-de-zhi-xing-guo-cheng-hui-bi-jiao-you-bang-zhu">¶</a> 11、可以在任何时候知道当前代码流程运行过的轨迹，如flowJS.trace，这对于了解页面的执行过程会比较有帮助；</h3><p><img src="https://img-blog.csdnimg.cn/2019111222022348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112220319516.png#pic_center" alt="在这里插入图片描述"></p><h3 id="12-zhi-chi-liu-cheng-qian-tao" tabindex="-1"><a class="header-anchor" href="#12-zhi-chi-liu-cheng-qian-tao">¶</a> 12、支持流程嵌套</h3><p><img src="https://img-blog.csdnimg.cn/20191112220535164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112220604437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="13-ke-yi-sui-shi-jie-shu-liu-cheng-ru-flowjs.stop" tabindex="-1"><a class="header-anchor" href="#13-ke-yi-sui-shi-jie-shu-liu-cheng-ru-flowjs.stop">¶</a> 13、可以随时结束流程，如flowJS.stop()；</h3><p><img src="https://img-blog.csdnimg.cn/20191112220815889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191112220900223.png#pic_center" alt="在这里插入图片描述"></p><h3 id="dai-ma-qing-dan" tabindex="-1"><a class="header-anchor" href="#dai-ma-qing-dan">¶</a> 代码清单：</h3><pre><code class="language-javascript">const INIT = &#39;init&#39;;\nconst PENDING = &#39;pending&#39;;\nconst FULLFILED = &#39;fullfiled&#39;;\nconst STOPED = &#39;stoped&#39;;\nconst REJECTED = &#39;rejected&#39;;\n\nfunction isObject(tar) {\n    return {}.toString.call(tar) === &#39;[object Object]&#39;;\n}\n\nfunction isFunction(tar) {\n    return {}.toString.call(tar) === &#39;[object Function]&#39;;\n}\n\nfunction isArray(tar) {\n    return Array.isArray(tar);\n}\n\nfunction isString(tar) {\n    return typeof tar === &#39;string&#39;;\n}\n\n// 扩展对象属性方法\nfunction extend() {\n    let target = arguments[0];\n    for (var i = 1, arg; i &lt; arguments.length, arg = arguments[i]; i++) {\n        for (var prop in arg) {\n            arg.hasOwnProperty(prop) &amp;&amp; (target[prop] = arg[prop]);\n        }\n    }\n\n    return target;\n}\n\n/**\n * Step类\n * @param {Array|String} name 一个或者多个步骤\n * @param {Object} flow 流程对象\n */\nclass Step {\n    constructor(name, flow) {\n        // 如果是一个step对象则合并返回\n        if (isObject(name)) {\n            return extend(this, name);\n        }\n\n        this.name = name;\n        this.flow = flow;\n\n        this.nextStep = null;\n        this.stepData = {};\n        this.stepCallback = {};\n        this.nextData = {};\n        this.prevStepName = null;\n        this.nextStepName = null;\n        // 遍历生成步骤映射\n        this.stepMapping = [].concat(name).reduce((total, curr) =&gt; {\n            total[curr] = false;\n            return total;\n        }, {});\n    }\n\n    // 设置下一步\n    setNext(stepName, success = function () { }, fail = function () { }) {\n        this.nextStepName = stepName;\n        this.nextStep = new Step(stepName, this.flow);\n        this.nextStep.prevStepName = this.name;\n        this.nextStep.stepCallback.fail = fail;\n        this.nextStep.stepCallback.success = success;\n\n        return this.nextStep; // 链式调用\n    };\n\n    // 设置下一步(数组方式)\n    setNexts(stepNames) {\n        let step = this;\n        \n        [].concat(stepNames).forEach(stepName =&gt; {\n            step = step.setNext(stepName);\n        });\n    };\n\n    // 获得当前步骤数据\n    getStepData(dataName) {\n        return dataName ? this.stepData[dataName] : this.stepData;\n    };\n\n    // 设置下一步数据\n    setNextData(data) {\n        extend(this.nextData, data);\n    };\n\n    // 获得/设置全局数据\n    flowData(data) {\n        let { flowData } = this.flow;\n        isObject(data) &amp;&amp; extend(flowData, data);\n\n        return isString(data) ? flowData[data] : flowData;\n    };\n\n    // 获得下一步骤\n    getNext() {\n        return this.nextStepName;\n    };\n\n    // 获得上一步骤\n    getPrev() {\n        return this.prevStepName;\n    };\n\n    // 获得当前步骤\n    getCurr() {\n        return this.name;\n    };\n\n    // 失败回调\n    fail() {\n        this.stepCallback.fail.apply(this, arguments);\n    };\n\n    // 成功回调\n    success() {\n        this.stepCallback.success.apply(this, arguments);\n    };\n\n    // 走下一步\n    next(stepName, success, fail) {\n        if(this.flow.status !== PENDING) {\n            this.flow.instance.onStop &amp;&amp; this.flow.instance.onStop(this)\n            return false;\n        }\n        \n        if(stepName) {\n            this.nextStepName = stepName;\n            this.nextStep = new Step(stepName, this.flow);\n        }\n\n        if (!this.nextStepName) return false;\n        if (success) this.nextStep.stepCallback.success = success;\n        if (fail) this.nextStep.stepCallback.fail = fail;\n\n        // 如果父步骤存在，则继承，否则=本步骤\n        this.nextStep.parent = this.parent || this.name;\n        this.nextStep.stepData = this.nextData;\n        this.stepMapping[this.name] = true;\n\n        if (this.done()) {\n            let nextSteps = [].concat(this.nextStepName);\n\n            this.setFlowTrace(nextSteps);\n            // 遍历执行步骤函数\n            nextSteps.forEach(name =&gt; this.runStep(name));\n        }\n    };\n\n    // 设置步骤轨迹\n    setFlowTrace(data) {\n        let trace = [].concat(data).map(name =&gt; this.flow.stepPath + name);\n\n        this.flow.trace.push(...trace);\n        isObject(this.parent) &amp;&amp; this.parent.flow.trace.push(...trace);\n    }\n\n    // 执行步骤函数\n    runStep(stepName) {\n        let { nextStep, nextStepName, flow } = this;\n        let fn = flow.steps[stepName];\n\n        if (typeof fn !== &#39;function&#39;) {\n            throw new Error(&quot;step not found: &quot; + stepName);\n        }\n            // 如果是群组\n        if (isArray(nextStepName)) {\n            nextStep = new Step(nextStep);\n            nextStep.name = stepName\n        }\n\n        fn.call(nextStep, nextStep, function() {\n            nextStep.next.apply(nextStep, arguments)\n        });\n    };\n\n    // 该步骤或该步骤所有子步骤是否运行完毕\n    done() {\n        return Object.values(this.stepMapping).every(v =&gt; v);\n    }\n}\n\n// 主程序\nclass Flow {\n    constructor(steps, parent) {\n        this.parent = parent;\n        this.flow = {\n            steps: extend({\n                init: function () { }\n            }, steps),\n            status: PENDING, // 进行中:pending|完成:fullfiled|已停止:stoped|已失败:rejected\n            instance: this,\n            flowData: {},\n            stepPath: &#39;&#39;,\n            trace: [INIT]\n        }\n    }\n\n    start() {\n        let { parent, flow } = this;\n        let initStep = new Step(INIT, flow);\n\n        if (parent) {\n            initStep.parent = parent;\n            flow.stepPath += (parent.name + &#39;.&#39;);\n            parent.flow.trace.push(flow.stepPath + INIT);\n        }\n\n        flow.steps.init.call(initStep, initStep, function() {\n            return initStep.next.apply(initStep, arguments);\n        });\n        return this;\n    }\n\n    stop() {\n        if(this.flow.status === PENDING) this.flow.status = STOPED;\n    }\n}\n\nfunction flowJS(data, parent) {\n    return new Flow(data, parent).start()\n}\n</code></pre>',32);function s(n,e,t,a,s,u){return i}const u={};u.render=s;e["default"]=u}}]);