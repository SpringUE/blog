(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b30be"],{2769:function(e,n,s){"use strict";s.r(n);var i=s("f2bf"),t={class:"blog-doc-component"},l=Object(i["p"])('<p></p><h2 id="shi-yong-webpack-ru-he-qing-li-wu-yong-yuan-wen-jian" tabindex="-1"><a class="header-anchor" href="#shi-yong-webpack-ru-he-qing-li-wu-yong-yuan-wen-jian">¶</a> 使用webpack-如何清理无用源文件</h2><h3 id="bei-jing" tabindex="-1"><a class="header-anchor" href="#bei-jing">¶</a> 背景</h3><p>项目随着时间的推移不断更新迭代，或者新项目从老项目迁移开发，项目变得越来越臃肿，无形中就存在了很多无用的文件.<br> 大型的项目，如果仅靠人肉去识别，难度相当大，那么怎样能够自动检测哪些是无用的文件呢？</p><p>下面介绍使用<code>useless-files-webpack-plugin</code>插件查找无用文件(版本<code>1.0.1</code>)</p><h3 id="1-an-zhuang" tabindex="-1"><a class="header-anchor" href="#1-an-zhuang">¶</a> 1、安装</h3><p><code>npm i useless-files-webpack-plugin -D</code><code>yarn add -D useless-files-webpack-plugin</code></p><h3 id="2-webpackpei-zhi" tabindex="-1"><a class="header-anchor" href="#2-webpackpei-zhi">¶</a> 2、webpack配置</h3><pre><code class="language-javascript">const UnusedFilesWebpackPlugin = require(&#39;useless-files-webpack-plugin&#39;)\n\nplugins: [\n  new UselessFile({\n    root: &#39;./src&#39;, // 项目目录\n    output: &#39;./unused-files.json&#39;, // 输出文件列表\n    clean: false // 删除文件,\n  })\n]\n</code></pre><h3 id="3-vue.config.jszhong-pei-zhi" tabindex="-1"><a class="header-anchor" href="#3-vue.config.jszhong-pei-zhi">¶</a> 3、vue.config.js中配置</h3><pre><code class="language-javascript">const UnusedFilesWebpackPlugin = require(&#39;useless-files-webpack-plugin&#39;)\n\nmodule.exports = {\n  configureWebpack: (config) =&gt; {\n    config.plugins.push(\n      new UnusedFilesWebpackPlugin({\n        root: &#39;./src&#39;, // 项目目录\n        output: &#39;./unused-files.json&#39;, // 输出文件列表\n        clean: false, // 是否删除文件,\n      })\n    )\n  },\n  devServer: {\n  }\n};\n\n</code></pre><h3 id="4-yun-xing-npm-run-build" tabindex="-1"><a class="header-anchor" href="#4-yun-xing-npm-run-build">¶</a> 4、运行npm run build</h3><p>打包完成后会在项目的根目录下生成一个unused-files.json文件, 保存着无用文件的列表。<br> 然后自行根据列表中的提供路径，核对相应文件是否需要保留，手动删除即可。<br> clean配置true会自动删除，此选项请慎用。</p><h3 id="5-yuan-dai-ma-1.0.1" tabindex="-1"><a class="header-anchor" href="#5-yuan-dai-ma-1.0.1">¶</a> 5、源代码(1.0.1)</h3><pre><code class="language-javascript">const fs = require(&#39;fs&#39;)\nconst glob = require(&#39;glob&#39;)\nconst path = require(&#39;path&#39;)\nconst shelljs = require(&#39;shelljs&#39;)\n\nclass CleanUnusedFilesPlugin {\n  constructor (options) {\n    this.opts = options\n  }\n  apply (compiler) {\n    let _this = this\n    compiler.plugin(&#39;after-emit&#39;, function (compilation, done) {\n      _this.findUnusedFiles(compilation, _this.opts)\n      done()\n    })\n  }\n\n/**\n * 获取依赖的文件\n */\n  getDependFiles (compilation) {\n    return new Promise((resolve, reject) =&gt; {\n      const dependedFiles = [...compilation.fileDependencies].reduce(\n        (acc, usedFilepath) =&gt; {\n          if (!~usedFilepath.indexOf(&#39;node_modules&#39;)) {\n            acc.push(usedFilepath)\n          }\n          return acc\n        },\n        []\n      )\n      resolve(dependedFiles)\n    })\n  }\n\n/**\n * 获取项目目录所有的文件\n */\n  getAllFiles (pattern) {\n    return new Promise((resolve, reject) =&gt; {\n      glob(pattern, {\n        nodir: true\n      }, (err, files) =&gt; {\n        if (err) {\n          throw err\n        }\n        const out = files.map(item =&gt; path.resolve(item))\n        resolve(out)\n      })\n    })\n  }\n\n  dealExclude (path, unusedList) {\n    const file = fs.readFileSync(path, &#39;utf-8&#39;)\n    const files = JSON.parse(file) || []\n    const result = unusedList.filter(unused =&gt; {\n      return !files.some(item =&gt; ~unused.indexOf(item))\n    })\n    return result\n  }\n\n  async findUnusedFiles (compilation, config = {}) {\n    const { root = &#39;./src&#39;, clean = false, output = &#39;./unused-files.json&#39;, exclude = false } = config\n    const pattern = root + &#39;/**/*&#39;\n    try {\n      const allChunks = await this.getDependFiles(compilation)\n      const allFiles = await this.getAllFiles(pattern)\n      let unUsed = allFiles\n        .filter(item =&gt; !~allChunks.indexOf(item))\n      if (exclude &amp;&amp; typeof exclude === &#39;string&#39;) {\n        unUsed = this.dealExclude(exclude, unUsed)\n      }\n      if (typeof output === &#39;string&#39;) {\n        fs.writeFileSync(output, JSON.stringify(unUsed, null, 4))\n      } else if (typeof output === &#39;function&#39;) {\n        output(unUsed)\n      }\n      if (clean) {\n        unUsed.forEach(file =&gt; {\n          shelljs.rm(file)\n          console.log(`remove file: ${file}`)\n        })\n      }\n      return unUsed\n    } catch (err) {\n      throw (err)\n    }\n  }\n}\n\nmodule.exports = CleanUnusedFilesPlugin\n</code></pre>',15),a=[l];function o(e,n,s,l,o,u){return Object(i["K"])(),Object(i["n"])("section",t,a)}const u={};u.render=o;n["default"]=u}}]);