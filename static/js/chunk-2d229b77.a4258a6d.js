(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d229b77"],{df43:function(n,e,o){"use strict";o.r(e);var t=o("f2bf"),a={class:"blog-doc-component"},r=Object(t["p"])('<p></p><h2 id="yi-bu-zu-jian-zhi-dong-tai-dan-chuang" tabindex="-1"><a class="header-anchor" href="#yi-bu-zu-jian-zhi-dong-tai-dan-chuang">¶</a> 异步组件之动态弹窗</h2><h3 id="jian-jie" tabindex="-1"><a class="header-anchor" href="#jian-jie">¶</a> 简介</h3><p>在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。<br> 弹窗几乎是项目中比不可少的一部分，它就是经典的异步组件需求。<br> 同时，它也是动态的，需要的时候通过方法来调用执行。</p><p>调用示例：</p><pre><code class="language-javascript">import importAsyncComponent from &#39;@/util.component&#39;\nconst DialogComp = importAsyncComponent(&#39;./components/DialogComp.vue&#39;)\n\n// 选项\nconst options = {\n  props: {}\n  events: {}\n}\nthis.$dialog(DialogComp, options).then(() =&gt; {\n  // todo something\n})\n</code></pre><h3 id="zhun-bei" tabindex="-1"><a class="header-anchor" href="#zhun-bei">¶</a> 准备</h3><p>Vue 官方也提供了相关的方法来实现此功能：</p><pre><code class="language-javascript">// Vue2\nconst AsyncComp = () =&gt; import(&#39;./components/MyComponent.vue&#39;)\n\n\n// Vue3\nimport { defineAsyncComponent } from &#39;vue&#39;\n\nconst AsyncComp = defineAsyncComponent(() =&gt;\n  import(&#39;./components/MyComponent.vue&#39;)\n)\n</code></pre><p>[<code>import</code>] 方法会返回一个Promise, 因此可以在事件钩子里进行拦截，增加loading效果以及出错提示。</p><p>安装nprogress</p><pre><code class="language-shell">npm install --save nprogress\n</code></pre><h3 id="feng-zhuang-yin-yong-fang-fa" tabindex="-1"><a class="header-anchor" href="#feng-zhuang-yin-yong-fang-fa">¶</a> 封装引用方法</h3><p>importAsyncComponent函数统一对引入组件进行处理<br> 以ant-design-vue组件库来做示例</p><pre><code class="language-javascript">// util.component.js\nimport { notification } from &#39;ant-design-vue&#39;;\nimport NProgress from &#39;nprogress&#39;;\nimport &#39;nprogress/nprogress.css&#39;;\n\nNProgress.configure({     \n  easing: &#39;ease&#39;,  // 动画方式    \n  speed: 500,  // 递增进度条的速度    \n  showSpinner: false, // 是否显示加载ico    \n  trickleSpeed: 200, // 自动递增间隔    \n  minimum: 0.3 // 初始化时的最小百分比\n})\n\nfunction importAsyncComponent(path) {\n  NProgress.start()\n  return import(path).then(res =&gt; {\n    return res\n  })\n  .catch(err =&gt; {\n    notification.open({\n      message: &#39;提示&#39;,\n      description: &#39;加载失败，请检查你的网络...&#39;\n    })\n  })\n  .finally(() =&gt; {\n    NProgress.done()\n  })\n}\n\nexport default importAsyncComponent\n</code></pre><h3 id="feng-zhuang-dan-chuang-han-shu" tabindex="-1"><a class="header-anchor" href="#feng-zhuang-dan-chuang-han-shu">¶</a> 封装弹窗函数</h3><p>上一步已经有了加载组件的函数，现在就差实现$dialog函数了</p><pre><code class="language-javascript">// util.dialog.js\nimport Vue from &#39;vue&#39;\n\n/**\n * 创建弹窗\n * @params {Object|Promise} component 弹窗组件\n * @params {Object} options 选项\n */\nfunction createDialogComp(component, options) {\n  const { props = {}, events = {} } = options || {}\n  const vm = new Vue({\n    render: h =&gt; h(component, { props })\n  })\n  \n  vm.$mount() \n\n  vm.destroy = () =&gt; {\n    document.body.removeChild(vm.$el)\n  }\n\n  // 监听关闭时销毁\n  vm.$watch(&#39;visible&#39;, function (nv) {\n    if(!nv) {\n      vm.destroy()\n    }\n  })\n\n  // 注册事件\n  Object.entries(events).forEach(([key, value]) =&gt; {\n    vm.$on(key, value) \n  })\n\n  // 挂载\n  document.body.appendChild(vm.$el)\n\n  // 销毁\n  vm.$destroy(() =&gt; vm.destroy())\n\n  // 打开\n  Vue.nextTick(() =&gt; {\n    vm.open()\n  })\n\n  return vm\n}\n\nexport default {\n  install(Vue) {\n    Vue.prototype.$dialog = function dialog(component, options) {\n      if(component instanceof Promise) {\n        component.then(res =&gt; {\n          return createDialogComp(res, options)\n        })\n      }\n      return createDialogComp(component, options)\n    }\n  }\n}\n</code></pre><h3 id="bang-ding-quan-ju" tabindex="-1"><a class="header-anchor" href="#bang-ding-quan-ju">¶</a> 绑定全局</h3><p>弹窗开发完成，如何绑定全局使用？</p><pre><code class="language-javascript">// main.js\nimport Vue from &#39;vue&#39;\nimport dialog from &#39;@/util.dialog.js&#39;\n\nVue.use(dialog)\n</code></pre>',21),s=[r];function i(n,e,o,r,i,p){return Object(t["K"])(),Object(t["n"])("section",a,s)}const p={};p.render=i;e["default"]=p}}]);