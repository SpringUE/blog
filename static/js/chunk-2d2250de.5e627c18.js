(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2250de"],{e382:function(e,n,t){"use strict";t.r(n);var i=t("f2bf");const a={class:"blog-doc-component"},l=Object(i["p"])('<h2 id="javascriptchang-yong-de-shu-ju-jie-gou-yu-suan-fa" tabindex="-1"><a class="header-anchor" href="#javascriptchang-yong-de-shu-ju-jie-gou-yu-suan-fa">¶</a> Javascript常用的数据结构与算法</h2><p>本文主要讲述Javascript中实现栈、队列、链表、集合、字典、散列表、树、图等数据结构，以及各种排序和搜索算法，包括冒泡排序、选择排序、插入排序、归并排序、快速排序、顺序搜索、二分搜索，最后还介绍了动态规划和贪心算法等常用的高级算法及相关知识。</p><p>在阅读之前假设你已了解并可以熟练使用Javascript编写应用程序。</p><p>一、数据结构</p><ul><li>栈：一种遵从先进后出 (LIFO) 原则的有序集合；新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端为栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</li><li>队列：与上相反，一种遵循先进先出 (FIFO / First In First Out) 原则的一组有序的项；队列在尾部添加新元素，并从头部移除元素。最新添加的元素必须排在队列的末尾。</li><li>链表：存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的；每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（指针/链接）组成。</li><li>集合：由一组无序且唯一（即不能重复）的项组成；这个数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中。</li><li>字典：以 [键，值] 对为数据形态的数据结构，其中键名用来查询特定元素，类似于 Javascript 中的Object。</li><li>散列：根据关键码值（Key value）直接进行访问的数据结构；它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度；这个映射函数叫做散列函数，存放记录的数组叫做散列表。</li><li>树：由 n（n&gt;=1）个有限节点组成一个具有层次关系的集合；把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的，基本呈一对多关系，树也可以看做是图的特殊形式。<br> 图：图是网络结构的抽象模型；图是一组由边连接的节点（顶点）；任何二元关系都可以用图来表示，常见的比如：道路图、关系图，呈多对多关系。</li></ul><p>二、算法</p><p>1.排序算法</p><ul><li>冒泡排序：比较任何两个相邻的项，如果第一个比第二个大，则交换它们；元素项向上移动至正确的顺序，好似气泡上升至表面一般，因此得名。</li><li>选择排序：每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，以此循环，直至排序完毕。</li><li>插入排序：将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，此算法适用于少量数据的排序，时间复杂度为 O(n^2)。</li><li>归并排序：将原始序列切分成较小的序列，只到每个小序列无法再切分，然后执行合并，即将小序列归并成大的序列，合并过程进行比较排序，只到最后只有一个排序完毕的大序列，时间复杂度为 O(n log n)。</li><li>快速排序：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行上述递归排序，以此达到整个数据变成有序序列，时间复杂度为 O(n log n)。</li></ul><p>2.搜索算法</p><ul><li>顺序搜索：让目标元素与列表中的每一个元素逐个比较，直到找出与给定元素相同的元素为止，缺点是效率低下。</li><li>二分搜索：在一个有序列表，以中间值为基准拆分为两个子列表，拿目标元素与中间值作比较从而再在目标的子列表中递归此方法，直至找到目标元素。</li></ul><p>3.其他</p><ul><li>贪心算法：在对问题求解时，不考虑全局，总是做出局部最优解的方法。</li><li>动态规划：在对问题求解时，由以求出的局部最优解来推导全局最优解。</li><li>复杂度概念：一个方法在执行的整个生命周期，所需要占用的资源，主要包括：时间资源、空间资源。</li></ul><p>​</p><h2 id="shu-ju-jie-gou" tabindex="-1"><a class="header-anchor" href="#shu-ju-jie-gou">¶</a> 数据结构：</h2><h3 id="1.zhan" tabindex="-1"><a class="header-anchor" href="#1.zhan">¶</a> 1.栈</h3><p>栈是一种遵从先进后出 (LIFO) 原则的有序集合；新添加的或待删除的元素都保存在栈的末尾，称作栈顶，另一端为栈底。</p><p>在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p><p>通俗来讲，一摞叠起来的书或盘子都可以看做一个栈，我们想要拿出最底下的书或盘子，一定要现将上面的移走才可以。</p><p>栈也被用在编程语言的编译器和内存中保存变变量、方法调用。</p><p>在 Javascript 中我们可以使用数组的原生方法实现一个栈/队列的功能，鉴于学习目的，我们使用类来实现一个栈。</p>',20),s=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class Stack {\n    constructor() {\n        this.items = []\n    }\n\n    // 入栈 \n    push(element) {\n        this.items.push(element)\n    }\n    // 出栈 \n    pop() {\n        return this.items.pop()\n    }\n    // 末位 \n    get peek() {\n        return this.items[this.items.length - 1]\n    }\n    // 是否为空栈 \n    get isEmpty() {\n        return !this.items.length\n    }\n    // 尺寸 \n    get size() {\n        return this.items.length\n    }\n    // 清空栈 \n    clear() { \n        this.items = [] \n    } \n    // 打印栈数据 \n    print() { \n        console.log(this.items.toString()) \n    } \n}\n")],-1),o=Object(i["o"])("p",null,"使用栈类：",-1),r=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"// 实例化一个栈 \nconst stack = new Stack() \nconsole.log(stack.isEmpty) // true\n\n// 添加元素 \nstack.push(5) \nstack.push(8) \n\n// 读取属性再添加 \nconsole.log(stack.peek) // 8 \nstack.push(11) \nconsole.log(stack.size) // 3 \nconsole.log(stack.isEmpty) // false \n")],-1),c=Object(i["o"])("h3",{id:"2.dui-lie",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#2.dui-lie"},"¶"),Object(i["q"])(" 2.队列")],-1),u=Object(i["o"])("p",null,"与栈相反，队列是一种遵循先进先出 (FIFO / First In First Out) 原则的一组有序的项；队列在尾部添加新元素，并从头部移除元素。",-1),p=Object(i["o"])("p",null,"最新添加的元素必须排在队列的末尾。",-1),h=Object(i["o"])("p",null,"在现实中，最常见的例子就是排队，吃饭排队、银行业务排队、公车的前门上后门下机制...，前面的人优先完成自己的事务，完成之后，下一个人才能继续。",-1),d=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdn.net/2018092310195541?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70",alt:"在这里插入图片描述"})],-1),b=Object(i["o"])("p",null,"在计算机科学中，一个常见的例子就是打印队列。",-1),g=Object(i["o"])("p",null,"比如说我们需要打印五份文档，我们会打开每个文档，然后点击打印按钮，每个文档都会被发送至打印队列，第一个发送到打印队列的文档会首先被打印，以此类推，直到打印完所有文档。",-1),j=Object(i["o"])("p",null,"同样的，我们在 Javascript 中实现一个队列类。",-1),m=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class Queue {\n    constructor(items) {\n        this.items = items || []\n    }\n    enqueue(element) {\n        this.items.push(element)\n    }\n    dequeue() {\n        return this.items.shift()\n    }\n    front() {\n        return this.items[0]\n    }\n    clear() {\n        this.items = []\n    }\n    get size() {\n        return this.items.length\n    }\n    get isEmpty() {\n        return !this.items.length\n    }\n    print() {\n        console.log(this.items.toString())\n    }\n}\n\n// 使用队列类： \nconst queue = new Queue() \nconsole.log(queue.isEmpty) // true \nqueue.enqueue('John') \nqueue.enqueue('Jack') \nqueue.enqueue('Camila') \nconsole.log(queue.size) // 3 \nconsole.log(queue.isEmpty) // false \nqueue.dequeue() \nqueue.dequeue() \nqueue.print() // 'Camila' \n")],-1),O=Object(i["o"])("ul",null,[Object(i["o"])("li",null,"优先队列")],-1),f=Object(i["o"])("p",null,"队列大量应用在计算机科学以及我们的生活中，我们在之前话题中实现的默认队列也有一些修改版本。",-1),y=Object(i["o"])("p",null,"其中一个修改版就是优先队列，元素的添加和移除是基于优先级的。",-1),x=Object(i["o"])("p",null,"一个现实的例子就是机场登机的顺序，头等舱和商务舱乘客的优先级要高于经济舱乘客。在有些国家，老年人和孕妇(或 带小孩的妇女)登机时也享有高于其他乘客的优先级。",-1),F=Object(i["o"])("p",null,"另一个现实中的例子是医院的(急诊科)候诊室。医生会优先处理病情比较严重的患者。通常，护士会鉴别分类，根据患者病情的严重程度放号。",-1),k=Object(i["o"])("p",null,"实现一个优先队列，有两种选项：设置优先级，然后在正确的位置添加元素；或者用入列操作添加元素，然后按照优先级移除它们。在下面示例中，我们将会在正确的位置添加元素，因此可以对它们使用默认的出列操作：",-1),_=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class PriorityQueue { \n    constructor() { \n        this.items = [] \n    } \n    \n    enqueue(element, priority) { \n        const queueElement = { element, priority } \n        if (this.isEmpty) { \n            this.items.push(queueElement) \n        } else { \n            const preIndex = this.items.findIndex((item) => queueElement.priority < item.priority) \n            if (preIndex > -1) { \n                this.items.splice(preIndex, 0, queueElement) \n            } else { \n                this.items.push(queueElement) \n            } \n        } \n    } \n    \n    dequeue() { \n        return this.items.shift() \n    } \n    \n    front() { \n        return this.items[0] \n    } \n    \n    clear() { \n        this.items = [] \n    } \n    \n    get size() { \n        return this.items.length \n    } get \n    \n    isEmpty() { \n        return !this.items.length \n    } \n    \n    print() { \n        console.log(this.items) \n    } \n} \n")],-1),v=Object(i["o"])("p",null,"优先队列的使用：",-1),z=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const priorityQueue = new PriorityQueue() \npriorityQueue.enqueue('John', 2) \npriorityQueue.enqueue('Jack', 1) \npriorityQueue.enqueue('Camila', 1) \npriorityQueue.enqueue('Surmon', 3) \npriorityQueue.enqueue('skyRover', 2) \npriorityQueue.enqueue('司马萌', 1) \npriorityQueue.print() \n\nconsole.log(priorityQueue.isEmpty, priorityQueue.size) // false 6\n")],-1),w=Object(i["o"])("ul",null,[Object(i["o"])("li",null,"循环队列")],-1),Z=Object(i["o"])("p",null,'为充分利用向量空间，克服"假溢出"现象的方法是：将向量空间想象为一个首尾相接的圆环，并称这种向量为循环向量。存储在其中的队列称为循环队列（Circular Queue）。这种循环队列可以以单链表、队列的方式来在实际编程应用中来实现。',-1),L=Object(i["o"])("p",null,"下面我们基于首次实现的队列类，简单实现一个循环引用的示例：",-1),G=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class LoopQueue extends Queue {\n    constructor(items) { \n        super(items) \n    } \n    \n    getIndex(index) { \n        const length = this.items.length \n        return index > length ? (index % length) : index \n    } \n        \n    find(index) { \n        return !this.isEmpty ? this.items[this.getIndex(index)] : null \n    }\n} \n")],-1),V=Object(i["o"])("p",null,"访问一个循环队列：",-1),A=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const loopQueue = new LoopQueue(['Surmon']) \nloopQueue.enqueue('SkyRover') \nloopQueue.enqueue('Even') \nloopQueue.enqueue('Alice') \nconsole.log(loopQueue.size, loopQueue.isEmpty) // 4 false \nconsole.log(loopQueue.find(26)) // 'Evan' \nconsole.log(loopQueue.find(87651)) // 'Alice' \n")],-1),N=Object(i["p"])('<h3 id="3.lian-biao" tabindex="-1"><a class="header-anchor" href="#3.lian-biao">¶</a> 3.链表</h3><p>要存储多个元素，数组（或列表）可能是最常用的数据结构。 每种语言都实现了数组。这种数据结构非常方便，提供了一个便利的[]语法来访问它的元素。 然而，这种数据结构有一个缺点：在大多数语言中，数组的大小是固定的，从数组的起点或中间插入或移除项的成本很高，因为需要移动元素； 尽管 JavaScript 中的Array类方法可以帮我们做这些事，但背后的处理机制同样如此。</p><p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个 元素由一个存储元素本身的节点和一个指向下一个元素的引用(也称指针或链接)组成。下图展示了链表的结构:</p><p>​<img src="https://img-blog.csdnimg.cn/20181209161013109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然而，链表需要使用指针，因此实现链表时需要额外注意。</p><p>数组的另一个细节是可以直接访问任何位置的任何元素，而要想访问链表中间的一个元素，需要从起点(表头)开始迭代列表直到找到所需的元素。</p><p>现实中有许多链表的例子：一列火车是由一系列车厢/车皮组成的，每节车厢/车皮都相互连接，你很容易分离一节车皮，改变它的位置，添加或移除它。下图演示了一列火车，每节车皮都是列表的元素，车皮间的连接就是指针：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209161049948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>下面我们使用 Javascript 创建一个链表类：</p>',9),H=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"// 链表节点 \nclass Node { \n    constructor(element) { \n        this.element = element this.next = null \n    } \n} \n\n// 链表 \nclass LinkedList { \n    constructor() { \n        this.head = null \n        this.length = 0 \n    } \n    \n    // 追加元素 \n    append(element) { \n        const node = new Node(element) \n        let current = null \n        if (this.head === null) { \n            this.head = node \n        } else { \n            current = this.head \n            while(current.next) { \n                current = current.next \n            } \n            current.next = node \n        } \n        this.length++ \n    } \n    \n    // 任意位置插入元素 \n    insert(position, element) { \n        if (position >= 0 && position -1 && position < length) { \n            let current = this.head \n            let previous = null \n            let index = 0 \n            if (position === 0) { \n                this.head = current.next \n            } else { \n                while (index++ < position) { \n                    previous = current \n                    current = current.next \n                } \n                previous.next = current.next \n            } \n            this.length-- \n            return current.element \n        }\n        return null \n    } \n    \n    // 寻找元素下标 \n    findIndex(element) { \n        let current = this.head \n        let index = -1 \n        while (current) { \n            if (element === current.element) { \n                return index + 1 \n            } \n            index++ \n            current = current.next \n        } \n        return -1 \n    } \n    \n    // 删除指定文档 \n    remove(element) { \n        const index = this.indexOf(element) \n        return this.removeAt(index) \n    } \n    \n    isEmpty() { \n        return !this.length \n    } \n    \n    size() { \n        return this.length \n    } \n    \n    // 转为字符串 \n    toString() { \n        let current = this.head \n        let string = '' \n        while (current) { \n            string += ` ${current.element}` \n            current = current.next \n        } \n        return string \n    } \n} \n")],-1),M=Object(i["o"])("p",null,"链表类的使用：",-1),q=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const linkedList = new LinkedList() \nconsole.log(linkedList) \n\nlinkedList.append(2) \nlinkedList.append(6) \nlinkedList.append(24) \nlinkedList.append(152) \nlinkedList.insert(3, 18) \n\nconsole.log(linkedList) \nconsole.log(linkedList.findIndex(24)) \n")],-1),E=Object(i["o"])("h4",{id:"shuang-xiang-lian-biao",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#shuang-xiang-lian-biao"},"¶"),Object(i["q"])(" 双向链表")],-1),S=Object(i["o"])("p",null,"链表有多种不同的类型，这一节介绍双向链表。双向链表和普通链表的区别在于，在链表中， 一个节点只有链向下一个节点的链接，而在双向链表中，链接是双向的:一个链向下一个元素， 另一个链向前一个元素，如下图所示:",-1),C=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209162233574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),T=Object(i["o"])("p",null,"双向链表提供了两种迭代列表的方法:从头到尾，或者反过来。我们也可以访问一个特定节 点的下一个或前一个元素。在单向链表中，如果迭代列表时错过了要找的元素，就需要回到列表 起点，重新开始迭代。这是双向链表的一个优点。",-1),B=Object(i["o"])("p",null,"我们继续来实现一个双向链表类：",-1),R=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"// 链表节点 \nclass Node { \n    constructor(element) { \n        this.element = element \n        this.prev = null \n        this.next = null \n    } \n} \n    \n// 双向链表 \nclass DoublyLinkedList { \n    constructor() { \n        this.head = null \n        this.tail = null \n        this.length = 0 \n    } \n    \n    // 任意位置插入元素 \n    insert(position, element) { \n        if (position >= 0 && position -1 && position < this.length) { \n            let current = this.head \n            let previous = null \n            let index = 0 \n            // 首位 \n            if (position === 0) { \n                this.head = this.head.next \n                this.head.prev = null \n                if (this.length === 1) { this.tail = null } \n                // 末位 \n            } else if (position === this.length - 1) {\n                this.tail = this.tail.prev \n                this.tail.next = null \n                // 中位 \n            } else { \n                while (index++ < position) { \n                    previous = current \n                    current = current.next \n                } \n                previous.next = current.next \n                current.next.prev = previous \n            } \n            this.length-- \n            return current.element \n        } else { \n            return null \n        } \n    } \n    // 其他方法... \n} \n")],-1),U=Object(i["p"])('<h4 id="xun-huan-lian-biao" tabindex="-1"><a class="header-anchor" href="#xun-huan-lian-biao">¶</a> 循环链表</h4><p>循环链表可以像链表一样只有单向引用，也可以像双向链表一样有双向引用。循环链表和链表之间唯一的区别在于，最后一个元素指向下一个元素的指针(tail.next)不是引用null， 而是指向第一个元素(head)，如下图所示。</p><p>​<img src="https://img-blog.csdnimg.cn/20181209162732680.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>双向循环链表有指向head元素的tail.next，和指向tail元素的head.prev。</p><p>​<img src="https://img-blog.csdnimg.cn/20181209162813606.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>链表相比数组最重要的优点，那就是无需移动链表中的元素，就能轻松地添加和移除元素。因此，当你需要添加和移除很多元素 时，最好的选择就是链表，而非数组。</p><h4 id="4.ji-he" tabindex="-1"><a class="header-anchor" href="#4.ji-he">¶</a> 4.集合</h4><p>集合是由一组无序且唯一（不能重复）的项组成的。这个数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中。</p><p>在数学中，集合是一组不同的对象（的集）。</p><p>比如说：一个由大于或等于0的证书组成的自然数集合：N = { 0, 1, 2, 3, 4, 5, 6, ... }，集合中的对象列表用{}包围。</p><p>集合是由一组一（即不能重的项组成的。这个数据结构使用了与有..合相同的数学..，但应用在.算..学的数据结构中。</p><p>目前 ES6 中已内置了 Set 类型的实现，出于学习目的，下面我们依旧使用Javascript创建一个集合类：</p>',12),W=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class Set { \n    constructor() { \n        this.items = {} \n    } \n    \n    has(value) { \n        return this.items.hasOwnProperty(value) \n    } \n    \n    add(value) { \n        if (!this.has(value)) { \n            this.items[value] = value \n            return true \n        } \n        return false \n    } \n    \n    remove(value) { \n        if (this.has(value)) { \n            delete this.items[value] \n            return true \n        } \n        return false \n    } \n    \n    get size() { \n        return Object.keys(this.items).length \n    } \n    \n    get values() { \n        return Object.keys(this.items) \n    } \n} \n")],-1),D=Object(i["o"])("p",null,"使用集合类：",-1),J=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},'const set = new Set() \nset.add(1) \nconsole.log(set.values) // ["1"] \nconsole.log(set.has(1)) // true \nconsole.log(set.size) // 1 \nset.add(2) \nconsole.log(set.values) // ["1", "2"] \nconsole.log(set.has(2)) // true \nconsole.log(set.size) // 2 \nset.remove(1) \nconsole.log(set.values) // ["2"] \nset.remove(2) \nconsole.log(set.values) // [] \n')],-1),I=Object(i["p"])('<p>对集合可以进行如下操作：</p><ul><li>并集：对于给定的两个集合，返回一个包含两个集合中所有元素的新集合。</li><li>交集：对于给定的两个集合，返回一个包含两个集合中Р有元素的新集合。</li><li>差集：对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的元素的新集合。</li><li>子集：求证一个给定集合是否是另一集合的子集。</li></ul><h4 id="bing-ji" tabindex="-1"><a class="header-anchor" href="#bing-ji">¶</a> 并集</h4><p>并集的数学概念：集合A和B的并集，表示为A∪B，定义如下：A∪B = { x | x∈A ∨ x∈B }，意思是x（元素）存在于A中，或x存在于B中。如图：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209163642436.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们基于刚才的 Set 类实现一个并集方法：</p>',6),Q=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"union(otherSet) { \n    const unionSet = new Set() \n    this.values.forEach((v, i) => unionSet.add(this.values[i])) \n    otherSet.values.forEach((v, i) => unionSet.add(otherSet.values[i])) \n    return unionSet \n} \n")],-1),P=Object(i["o"])("h4",{id:"jiao-ji",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#jiao-ji"},"¶"),Object(i["q"])(" 交集")],-1),$=Object(i["o"])("p",null,"并集的数学概念：集合A和B的交集，表示为A∩B，定义如下：A∩B = { x | x∈A ∧ x∈B }，意思是x（元素）存在于A中，且x存在于B中。如图：",-1),K=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209163722610.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),X=Object(i["o"])("p",null,"我们基于刚才的 Set 类实现一个交集方法：",-1),Y=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"intersection(otherSet) { \n    const intersectionSet = new Set() \n    this.values.forEach((v, i) => { \n        if (otherSet.has(v)) { \n            intersectionSet.add(v) \n        } \n    }) \n    return intersectionSet \n} \n")],-1),ee=Object(i["o"])("h4",{id:"chai-ji",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#chai-ji"},"¶"),Object(i["q"])(" 差集")],-1),ne=Object(i["o"])("p",null,"差集的数学概念：集合A和B的差集，表示为A-B，定义如下：A-B = { x | x∈A ∧ x∉B }，意思是x（元素）存在于A中，且不x存在于B中。如图：",-1),te=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209163839909.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),ie=Object(i["o"])("p",null,"我们基于刚才的 Set 类实现一个差集方法：",-1),ae=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"difference(otherSet) { \n    const differenceSet = new Set() \n    this.values.forEach((v, i) => { \n        if (!otherSet.has(v)) { \n            differenceSet.add(v) \n        } \n    }) \n    return differenceSet \n} \n")],-1),le=Object(i["o"])("h4",{id:"zi-ji",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#zi-ji"},"¶"),Object(i["q"])(" 子集")],-1),se=Object(i["o"])("p",null,"子集的数学概念：集合A是B的子集，或者说集合B包含了集合A，如图：",-1),oe=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209163944501.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),re=Object(i["o"])("p",null,"我们基于刚才的 Set 类实现一个子集方法：",-1),ce=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"subset(otherSet) { \n    if (this.size > otherSet.size) { \n        return false \n    } else { \n        return !this.values.some(v => !otherSet.has(v)) \n    } \n} \n")],-1),ue=Object(i["o"])("h3",{id:"5.zi-dian",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#5.zi-dian"},"¶"),Object(i["q"])(" 5.字典")],-1),pe=Object(i["o"])("p",null,"集合、字典、散列表都可以存储不重复的数据。字典和我们上面实现的集合很像，上面的集合中我们以{ value: value }的形式存储数据，而字典是以{ key: value }的形式存储数据，字典也称作映射。",-1),he=Object(i["o"])("p",null,"简单说：Object 对象便是字典在 Javascript 中的实现。",-1),de=Object(i["o"])("p",null,"还是简单实现一个字典类：",-1),be=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class Dictionary { \n    constructor() { \n        this.items = {} \n    } \n    \n    set(key, value) { \n        this.items[key] = value \n    } \n    \n    get(key) { \n        return this.items[key] \n    } \n    \n    remove(key) { \n        delete this.items[key] \n    } \n    \n    get keys() { \n        return Object.keys(this.items) \n    } \n    \n    get values() { \n        /* \n        也可以使用ES7中的values方法 \n        return Object.values(this.items) \n        */ \n        \n        // 在这里我们通过循环生成一个数组并输出 \n        return Object.keys(this.items).reduce((r, c, i) => { \n            r.push(this.items[c]) \n            return r \n        }, []) \n        \n    } \n    \n} \n")],-1),ge=Object(i["o"])("p",null,"使用字典类：",-1),je=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const dictionary = new Dictionary() \ndictionary.set('Gandalf', 'gandalf@email.com') \ndictionary.set('John', 'johnsnow@email.com') \ndictionary.set('Tyrion', 'tyrion@email.com') \nconsole.log(dictionary) \nconsole.log(dictionary.keys) \nconsole.log(dictionary.values) \nconsole.log(dictionary.items) \n")],-1),me=Object(i["o"])("h3",{id:"6.san-lie",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#6.san-lie"},"¶"),Object(i["q"])(" 6.散列")],-1),Oe=Object(i["o"])("p",null,"HashTable 类，也叫 HashMap 类，是 Dictionary 类的一种散列表实现方式。",-1),fe=Object(i["o"])("p",null,"散列算法的作用是尽可能快地在数据结构中找到一个值。在上面的例子中，如果要在数据结构中获得一个值（使用get方法），需要遍历整个数据结构来得到它。如果使用散列函数，就知道值的具体位置，因此能够快速检索到该值，散列函数的作用是给定一个键值，然后返回值在表中的地址。",-1),ye=Object(i["o"])("p",null,"举个例子，我们继续使用上面字典中的代码示例。我们将要使用最常见的散列函数 - 'lose lose'散列函数，方法是简单地将每个键值中的每个字母的ASCII值相加。如下图：",-1),xe=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209164539548.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),Fe=Object(i["o"])("p",null,"下面我们在 Javascript 中实现一个散列表：",-1),ke=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class HashTable { \n    constructor() {\n        this.table = [] \n    } \n    \n    // 散列函数 \n    static loseloseHashCode(key) { \n        let hash = 0 \n        for (let codePoint of key) { \n            hash += codePoint.charCodeAt() \n        } \n        return hash % 37 \n    } \n    \n    // 修改和增加元素 \n    put(key, value) { \n        const position = HashTable.loseloseHashCode(key) \n        console.log(`${position} - ${key}`) \n        this.table[position] = value \n    } \n    \n    get(key) { \n        return this.table[HashTable.loseloseHashCode(key)] \n    } \n    \n    remove(key) { \n        this.table[HashTable.loseloseHashCode(key)] = undefined \n    } \n} \n")],-1),_e=Object(i["o"])("p",null,"对于 HashTable 类来说，我们不需要像 ArrayList 类一样从 table 数组中将位置也移除。由 于元素分布于整个数组范围内，一些位置会没有任何元素占据，并默认为undefined值。我们也 不能将位置本身从数组中移除（这会改变其他元素的位置），否则，当下次需要获得或移除一个 元素的时候，这个元素会不在我们用散列函数求出的位置上。",-1),ve=Object(i["o"])("h4",{id:"shi-yong-hashtable-lei",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#shi-yong-hashtable-lei"},"¶"),Object(i["q"])(" 使用 HashTable 类")],-1),ze=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const hash = new HashTable() \nhash.put('Surmon', 'surmon.me@email.com') // 19 - Surmon \nhash.put('John', 'johnsnow@email.com') // 29 - John \nhash.put('Tyrion', 'tyrion@email.com') // 16 - Tyrion \n\n// 测试get方法 \nconsole.log(hash.get('Surmon')) // surmon.me@email.com \nconsole.log(hash.get('Loiane')) // undefined \nconsole.log(hash)\n")],-1),we=Object(i["p"])('<p>下面的图表展现了包含这三个元素的 HashTable 数据结构:</p><p>​<img src="https://img-blog.csdnimg.cn/20181209164835463.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="san-lie-biao-he-san-lie-ji-he" tabindex="-1"><a class="header-anchor" href="#san-lie-biao-he-san-lie-ji-he">¶</a> 散列表和散列集合</h4><p>散列表和散列映射是一样的，上面已经介绍了这种数据结构。</p><p>在一些编程语言中，还有一种叫作散列集合的实现。散列集合由一个集合构成，但是插人、 移除或获取元素时，使用的是散列函数。我们可以重用上面实现的所有代码来实现散列集合， 不同之处在于，不再添加键值对，而是只插入值而没有键。例如，可以使用散列集合来存储所有 的英语单词（不包括它们的定义)。和集合相似，散列集合只存储唯一的不重复的值。</p><h4 id="chu-li-san-lie-biao-zhong-de-chong-tu" tabindex="-1"><a class="header-anchor" href="#chu-li-san-lie-biao-zhong-de-chong-tu">¶</a> 处理散列表中的冲突</h4><p>有时候，一些键会有相同的散列值。不同的值在散列表中对应相同位置的时候，我们称其为冲突。如下代码：</p>',7),Ze=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const hash = new HashTable() \nhash.put('Gandalf', 'gandalf@email.com') \nhash.put('John', 'johnsnow®email.com') \nhash.put('Tyrion', 'tyrion@email.com') \nhash.put('Aaron', 'aaronOemail.com') \nhash.put('Donnie', 'donnie@email.com') \nhash.put('Ana', 'ana©email.com') \nhash.put('Jonathan', 'jonathan@email.com') \nhash.put('Jamie', 'jamie@email.com') \nhash.put('Sue', 'sueOemail.com') \nhash.put('Mindy', 'mindy@email.com') \nhash.put('Paul', 'paul©email.com') \nhash.put('Nathan', 'nathan@email.com')\n")],-1),Le=Object(i["p"])('<p>在上面代码中，Tyrion 和 Aaron 有相同的散列值（16)，Donnie 和 Ana 有相同的散列值（13)，Jonathan、Jamie 和 Sue 有相同的散列值（5), Mindy 和 Paul 也有相同的散列值（32)，导致最终的数据对象中，只有最后一次被添加/修改的数据会覆盖原本数据，进而生效。</p><p>使用一个数据结构来保存数据的目的显然不是去丢失这些数据，而是通过某种方法将它们全部保存起来；因此，当这种情况发生的时候就要去解决它。</p><p>处理冲突有几种方法：分离链接、线性探查和双散列法。下面介绍前两种方法。</p><h4 id="fen-chi-lian-jie" tabindex="-1"><a class="header-anchor" href="#fen-chi-lian-jie">¶</a> 分离链接</h4><p>分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。它是解决冲突的 最简单的方法，但是它在 HashTable 实例之外还需要额外的存储空间。</p><p>例如，我们在之前的测试代码中使用分离链接的话，输出结果将会是这样：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209165054944.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>在位置5上，将会有包含三个元素的LinkedList实例</li><li>在位置13、16和32上，将会有包含两个元素的LinkedList实例</li><li>在位置10、19和29上，将会有包含单个元素的LinkedList实例 对于分离链接和线性探查来说，只需要重写三个方法：put、get 和 remove 这三个方法，在 每种技术实现中都是不同的。</li></ul><p>为了实现一个使用了分离链接的 HashTable 实例，我们需要一个新的辅助类来表示将要加人 LinkedList 实例的元素，在这里我们可以直接使用链表类。</p><p>下面我们加入链表类重写三个方法：</p>',10),Ge=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"put(key, value) { \n    const position = HashTable.loseloseHashCode(key) \n    if (this.table[position] === undefined) { \n        this.table[position] = new LinkedList() \n    } \n    this.table[position].append({ key, value }) } \n    \n    get(key) { \n        const position = HashTable.loseloseHashCode(key) \n        if (this.table[position] === undefined) return undefined \n        const getElementValue = node => { \n            if (!node && !node.element) return undefined \n            if (Object.is(node.element.key, key)) { \n                return node.element.value \n            } else { \n                return getElementValue(node.next) \n            } \n        } \n        return getElementValue(this.table[position].head) \n    } \n    \n    remove(key) { \n        const position = HashTable.loseloseHashCode(key) \n        if (this.table[position] === undefined) return undefined \n        const getElementValue = node => { \n            if (!node && !node.element) return false \n            if (Object.is(node.element.key, key)) { \n                this.table[position].remove(node.element) \n                if (this.table[position].isEmpty) { \n                    this.table[position] = undefined \n                } \n                return true \n            } else { \n                return getElementValue(node.next) \n            } \n        } \n        return getElementValue(this.table[position].head) \n    }\n}\n")],-1),Ve=Object(i["o"])("h4",{id:"xian-xing-tan-cha",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#xian-xing-tan-cha"},"¶"),Object(i["q"])(" 线性探查")],-1),Ae=Object(i["o"])("p",null,"当想向表中某个位置加人一个新元素的时候，如果索引为 index 的位置已经被占据了，就尝试 index+1的位置。如果index+1 的位置也被占据了，就尝试 index+2 的位置，以此类推。如下图：",-1),Ne=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209165250235.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),He=Object(i["o"])("p",null,"下面我们使用线性探查重写三个方法：",-1),Me=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"put(key, value) { \n    const position = HashTable.loseloseHashCode(key) \n    if (this.table[position] === undefined) { \n        this.table[position] = { key, value } \n    } else { \n        let index = ++position \n        while (this.table[index] !== undefined) { \n            index++ \n        } \n        this.table[index] = { key, value } \n    } \n    this.table[position].append({ key, value }) \n} \n\nget(key) { \n    const position = HashTable.loseloseHashCode(key) \n    const getElementValue = index => { \n        if (this.table[index] === undefined) return undefined \n        if (Object.is(this.table[index].key, key)) { \n            return this.table[index].value \n        } else { \n            return getElementValue(index + 1) \n        } \n    } \n    return getElementValue(position) \n} \n\nremove(key) { \n    const position = HashTable.loseloseHashCode(key) \n    const removeElementValue = index => { \n        if (this.table[index] === undefined) return false \n        if (Object.is(this.table[index].key, key)) { \n            this.table[index] = undefined return true \n        } else { \n            return removeElementValue(index + 1) \n        } \n    } \n    return removeElementValue(position) \n}\n")],-1),qe=Object(i["o"])("h4",{id:"geng-duo-han-shu",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#geng-duo-han-shu"},"¶"),Object(i["q"])(" 更多函数")],-1),Ee=Object(i["o"])("p",null,'我们实现的"lose lose"散列函数并不是一个表现良好的散列函数，因为它会产生太多的冲 突。如果我们使用这个函数的话，会产生各种各样的冲突。一个表现良好的散列函数是由几个方 面构成的：插人和检索元素的时间（即性能），当然也包括较低的冲突可能性。我们可以在网上 找到一些不同的实现方法。像：djb2、sdbm...，或者也可以实现自己的散列函数。',-1),Se=Object(i["o"])("p",null,"其中一个可以实现的比“lose lose”更好的散列函数是 djb2：",-1),Ce=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"static djb2HashCode(key) { \n    let hash = 5381 \n    for (let codePoint of key) { \n        hash = hash * 33 + codePoint.charCodeAt() \n    } \n    return hash % 1013 \n}\n")],-1),Te=Object(i["p"])('<p>使用 djb2 函数后，上面的散列表示例便不再有冲突。</p><h3 id="7.shu" tabindex="-1"><a class="header-anchor" href="#7.shu">¶</a> 7.树</h3><p>树是一种非顺序数据结构，一种分层数据的抽象模型，它对于存储需要快速查找的数据非常有用。</p><p>现实生活中最常见的树的例子是家谱，或是公司的组织架构图，如下图：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209165425428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>一个树结构包含一系列存在父子关系的节点。每个节点都有一个父节点（除了顶部的第一个 节点）以及零个或多个子节点：</p><p>树大概包含以下几种结构/属性：</p><ul><li><p>节点</p><p>1.根节点<br> 2.内部节点：非根节点、且有子节点的节点<br> 3.外部节点/页节点：无子节点的节点</p></li><li><p>子树：就是大大小小节点组成的树</p></li><li><p>深度：节点到根节点的节点数量</p></li><li><p>高度：树的高度取决于所有节点深度中的最大值</p></li><li><p>层级：也可以按照节点级别来分层</p></li></ul><h4 id="er-cha-shu-he-er-cha-sou-suo-shu" tabindex="-1"><a class="header-anchor" href="#er-cha-shu-he-er-cha-sou-suo-shu">¶</a> 二叉树和二叉搜索树</h4><p>二叉树中的节点最多只能有两个子节点：一个是左侧子节点，另一个是右侧子节点。这些定 义有助于我们写出更高效的向/从树中插人、查找和删除节点的算法。二叉树在计算机科学中的 应用非常广泛。 二</p><p>叉搜索树（BST）是二叉树的一种，但是它只允许你在左侧节点存储（比父节点）小的值， 在右侧节点存储（比父节点）大（或者等于）的值。上图中就展现了一棵二叉搜索树。</p><p>注：不同于之前的链表和集合，在树中节点被称为&quot;键&quot;，而不是&quot;项&quot;。</p><p>下图展现了二叉搜索树数据结构的组织方式：</p><p>​<img src="https://img-blog.csdnimg.cn/201812091659038.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>同样的，我们使用 Javascript 实现一个 BinarySearchTree 类。</p>',15),Be=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class Node { \n    constructor(key) { \n        this.key = key \n        this.left = null \n        this.right = null \n    } \n} \n\nclass BinarySearchTree { \n    constructor() { \n        this.root = null \n    } \n    \n    insert(key) { \n        const newNode = new Node(key) \n        const insertNode = (node, newNode) => { \n            if (newNode.key < node.key) { \n                if (node.left === null) { \n                    node.left = newNode \n                } else { \n                    insertNode(node.left, newNode) \n                } \n            } else { \n                if (node.right === null) { \n                    node.right = newNode \n                } else { \n                    insertNode(node.right, newNode) \n                } \n            } \n        } \n        if (!this.root) { \n            this.root = newNode \n        } else { \n            insertNode(this.root, newNode) \n        } \n    } \n}\n")],-1),Re=Object(i["o"])("p",null,"二叉搜索树类的使用：",-1),Ue=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const tree = new BinarySearchTree() \ntree.insert(11) \ntree.insert(7) \ntree.insert(5) \ntree.insert(3) \ntree.insert(9) \ntree.insert(8) \ntree.insert(10) \ntree.insert(13) \ntree.insert(12) \ntree.insert(14) \ntree.insert(20) \ntree.insert(18) \ntree.insert(25)\n")],-1),We=Object(i["p"])('<p>最终构建的树如下图：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209165952803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="shu-de-bian-li" tabindex="-1"><a class="header-anchor" href="#shu-de-bian-li">¶</a> 树的遍历</h4><p>遍历一棵树是指访问树的每个节点并对它们进行某种操作的过程。但是我们应该怎么去做呢？应该从树的顶端还是底端开始呢？从左开始还是从右开始呢？</p><p>访问树的所有节点有三种方式：中序、先序、后序。</p><h4 id="zhong-xu-bian-li" tabindex="-1"><a class="header-anchor" href="#zhong-xu-bian-li">¶</a> 中序遍历</h4><p>中序遍历是一种以上行顺序访问 BST 所有节点的遍历方式，也就是以从最小到最大的顺序访 问所有节点。中序遍历的一种应用就是对树进行排序操作。我们来看它的实现：</p>',7),De=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"inOrderTraverse(callback) { \n    const inOrderTraverseNode = (node, callback) => { \n        if (node !== null) { \n            inOrderTraverseNode(node.left, callback) \n            callback(node.key) \n            inOrderTraverseNode(node.right, callback) \n        } \n    } \n    inOrderTraverseNode(this.root, callback) \n}\n")],-1),Je=Object(i["o"])("p",null,"inOrderTraverse方法接收一个回调函数作为参数，回调函数用来定义我们对遍历到的每个节点进行的操作，这也叫作访问者模式。",-1),Ie=Object(i["o"])("p",null,"在之前展示的树上执行下面的方法：",-1),Qe=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"tree.inOrderTraverse(value => { \n    console.log(value) \n})\n")],-1),Pe=Object(i["o"])("p",null,"下面的结果将会在控制台上输出（每个数字将会输出在不同的行）:",-1),$e=Object(i["o"])("p",null,"3 5 6 7 8 9 10 11 12 13 14 15 18 20 25",-1),Ke=Object(i["o"])("p",null,"下面的图描绘了 inOrderTraverse 方法的访问路径：",-1),Xe=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/2018120917020228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),Ye=Object(i["o"])("h4",{id:"xian-xu-bian-li",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#xian-xu-bian-li"},"¶"),Object(i["q"])(" 先序遍历")],-1),en=Object(i["o"])("p",null,"先序遍历是以优先于后代节点的顺序访问每个节点的。先序遍历的一种应用是打印一个结构化的文档。",-1),nn=Object(i["o"])("p",null,"我们来看实现：",-1),tn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"preOrderTraverse(callback) { \n    const preOrderTraverseNode = (node, callback) => { \n        if (node !== null) { \n            callback(node.key) \n            preOrderTraverseNode(node.left, callback) \n            preOrderTraverseNode(node.right, callback) \n        } \n    } \n    preOrderTraverseNode(this.root, callback) \n}\n")],-1),an=Object(i["o"])("p",null,"下面的图描绘了 preOrderTraverse 方法的访问路径:",-1),ln=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209170354851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),sn=Object(i["o"])("h4",{id:"hou-xu-bian-li",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#hou-xu-bian-li"},"¶"),Object(i["q"])(" 后序遍历")],-1),on=Object(i["o"])("p",null,"后序遍历则是先访问节点的后代节点，再访问节点本身。后序遍历的一种应用是计算一个目录和它的子目录中所有文件所占空间的大小。",-1),rn=Object(i["o"])("p",null,"我们来看它的实现：",-1),cn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"postOrderTraverse(callback) { \n    const postOrderTraverseNode = (node, callback) => { \n        if (node !== null) { \n            postOrderTraverseNode(node.left, callback) \n            postOrderTraverseNode(node.right, callback) \n            callback(node.key) \n        } \n    } \n    postOrderTraverseNode(this.root, callback) \n}\n")],-1),un=Object(i["p"])('<p>这个例子中，后序遍历会先访问左侧子节点，然后是右侧子节点，最后是父节点本身。</p><p>你会发现，中序、先序和后序遍历的实现方式是很相似的，唯一不同的是三行代码的执行顺序。 下</p><p>面的图描绘了 postOrderTraverse方法的访问路径:</p><p>​<img src="https://img-blog.csdnimg.cn/20181209170508437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="san-zhong-bian-li-fang-wen-shun-xu-de-bu-tong" tabindex="-1"><a class="header-anchor" href="#san-zhong-bian-li-fang-wen-shun-xu-de-bu-tong">¶</a> 三种遍历访问顺序的不同：</h4><p>1.先序遍历：节点本身 =&gt; 左侧子节点 =&gt; 右侧子节点<br> 2.中序遍历：左侧子节点 =&gt; 节点本身 =&gt; 右侧子节点<br> 3.后序遍历：左侧子节点 =&gt; 节点本身 =&gt; 右侧子节点</p><h4 id="sou-suo-shu-zhong-de-zhi" tabindex="-1"><a class="header-anchor" href="#sou-suo-shu-zhong-de-zhi">¶</a> 搜索树中的值</h4><p>在树中，有三种经常执行的搜索类型：</p><ul><li>最小值</li><li>最大值</li><li>搜索特定的值</li></ul><p>搜索最小值和最大值</p><p>我们使用下面的树作为示例：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209170705763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>只用眼睛看这张图，你能一下找到树中的最小值和最大值吗？</p><p>实现方法：</p>',14),pn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"min(node) { \n    const minNode = node => { \n        return node ? (node.left ? minNode(node.left) : node) : null \n    } \n    return minNode(node || this.root) \n} \n\nmax(node) { \n    const maxNode = node => { \n        return node ? (node.right ? maxNode(node.right) : node) : null \n    } \n    return maxNode(node || this.root) \n}\n")],-1),hn=Object(i["o"])("h4",{id:"sou-suo-yi-ge-te-ding-de-zhi",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#sou-suo-yi-ge-te-ding-de-zhi"},"¶"),Object(i["q"])(" 搜索一个特定的值")],-1),dn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"search(key) { \n    const searchNode = (node, key) => { \n        if (node === null) return false \n        if (node.key === key) return node \n        return searchNode((key < node.key) ? node.left : node.right, key) \n    } \n    return searchNode(root, key) \n}\n")],-1),bn=Object(i["o"])("h4",{id:"yi-chu-yi-ge-jie-dian-dai-xiu-gai",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#yi-chu-yi-ge-jie-dian-dai-xiu-gai"},"¶"),Object(i["q"])(" 移除一个节点（待修改）")],-1),gn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"remove(key) { \n    const removeNode = (node, key) => { \n        if (node === null) return false \n        if (node.key === key) { \n            console.log(node) \n            if (node.left === null && node.right === null) { \n                let _node = node node = null return _node \n            } else { \n                console.log('key', key) \n            } \n        } else if (node.left !== null && node.key > key) { \n            if (node.left.key === key) { \n                node.left.key = this.min(node.left.right).key \n                removeNode(node.left.right, node.left.key) \n                return node.left \n            } else { \n                return removeNode(node.left, key) \n            } \n        } else if (node.right !== null && node.key < key) { \n            if (node.right.key === key) { \n                node.right.key = this.min(node.right.right).key \n                removeNode(node.right.right, node.right.key) \n                return node.right \n            } else { \n                return removeNode(node.right, key) \n            } \n        } else { \n            return false \n        } \n        return removeNode((key < node.key) ? node.left : node.right, key) \n    } \n    return removeNode(this.root, key) \n}\n")],-1),jn=Object(i["p"])('<h4 id="geng-duo-guan-yu-er-cha-shu-de-zhi-shi" tabindex="-1"><a class="header-anchor" href="#geng-duo-guan-yu-er-cha-shu-de-zhi-shi">¶</a> 更多关于二叉树的知识</h4><p>BST存在一个问题：取决于你添加的节点数，树的一条边可能会非常深；也就是说，树的一 条分支会有很多层，而其他的分支却只有几层，如下图所示：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209170831699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>AVL树：</p><p>AVL树是一种自平衡二叉搜索树，AVL树本质上是带了平衡功能的二叉查找树（二叉排序树，二叉搜索树），在AVL树中任何节点的两个子树的高度最大差别为一，也就是说这种树会在添加或移除节点时尽量试着成为一棵完全树，所以它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下都是 O（log n），增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。</p><p>红黑树：</p><p>红黑树和AVL树类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能；它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在实践中是高效的：它可以在O(log n)时间内做查找，插入和删除，这里的 n 是树中元素的数目。</p><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色或红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：</p><ul><li>节点是红色或黑色</li><li>根节点是黑色</li><li>每个叶节点（NIL节点，空节点）是黑色的</li><li>每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</li><li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点</li></ul><p>这些约束强制了红黑树的关键性质：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。</p><p>红黑树和AVL树一样都对插入时间、删除时间和查找时间提供了最好可能的最坏情况担保。这不只是使它们在时间敏感的应用如即时应用(real time application)中有价值，而且使它们有在提供最坏情况担保的其他数据结构中作为建造板块的价值；例如，在计算几何中使用的很多数据结构都可以基于红黑树。 红黑树在函数式编程中也特别有用，在这里它们是最常用的持久数据结构之一，它们用来构造关联数组和集合，在突变之后它们能保持为以前的版本。除了O(log n)的时间之外，红黑树的持久版本对每次插入或删除需要O(log n)的空间。</p><h4 id="8.tu" tabindex="-1"><a class="header-anchor" href="#8.tu">¶</a> 8.图</h4><p>图是网络结构的抽象模型。图是一组由边连接的节点（或顶点），任何二元关系都可以用图来表示。</p><p>任何社交网络，例如 Facebook、Twitter 和 Google plus，都可以用图来表示；我们还可以使用图来表示道路、航班以及通信状态，如下图所示：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209171453643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>一个图G=(V, E)由以下兀素组成：</p><ul><li>V: 一组顶点</li><li>E: 一组边，连接V中的顶点</li></ul><p>下图表示一个图:</p><p>​<img src="https://img-blog.csdnimg.cn/20181209171607656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>由一条边连接在一起的顶点称为相邻顶点。比如，A和B是相邻的，A和D是相邻的，A和C 是相邻的，A和E不是相邻的。 一个顶点的度是其相邻顶点的数量。比如，A和其他三个顶点相连接，因此，A的度为3; E 和其他两个顶点相连，因此，E的度为2。 路径是顶点v1, v2, ...vk的一个连续序列，其中 vi 和 vi+1 是相邻的。以上图为例， 其中包含路径A B E I 和 A C D G。 简单路径要求不包含重复的顶点。举个例子，ADG是一条简单路径。除去最后一个顶点（因 为它和第一个顶点是同一个顶点），环也是一个简单路径，比如ADC A(最后一个顶点重新回到A )。 如果图中不存在环，则称该图是无坏的。如果图中每两个顶点间都存在路径，则该图是连通的。</p><h4 id="you-xiang-tu-he-wu-xiang-tu" tabindex="-1"><a class="header-anchor" href="#you-xiang-tu-he-wu-xiang-tu">¶</a> 有向图和无向图</h4><p>图可以是无向的（边没有方向）或是有向的（有向图）。如下图所示，有向图的边有一个方向：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209171705137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如果图中每两个顶点间在双向上都存在路径，则该图是强连通的。例如，C和D是强连通的， 而A和B不是强连通的。 图还可以是未加权的（目前为止我们看到的图都是未加权的）或是加权的。如下图所示，加 权图的边被赋予了权值：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209171738359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们可以使用图来解决计算机科学世界中的很多问题，比如搜索图中的一个特定顶点或搜索 一条特定边，寻找图中的一条路径（从一个顶点到另一个顶点），寻找两个顶点之间的最短路径， 以及环检测。</p><p>从数据结构的角度来说，我们有多种方式来表示图。在所有的表示法中，不存在绝对正确的 方式。图的正确表示法取决于待解决的问题和图的类型。</p><h4 id="lin-jie-ju-zhen" tabindex="-1"><a class="header-anchor" href="#lin-jie-ju-zhen">¶</a> 邻接矩阵</h4><p>图最常见的实现是邻接矩阵。每个节点都和一个整数相关联，该整数将作为数组的索引。我 们用一个二维数组来表示顶点之间的连接。如果索引为 i 的节点和索引为 j 的节点相邻，则array[i][j] ===1，否则array[i][j] === 0,如下图所示：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209171830874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>不是强连通的图（稀疏图）如果用邻接矩阵来表示，则矩阵中将会有很多0,这意味着我们 浪费了计算机存储空间来表示根本不存在的边。例如，找给定顶点的相邻顶点，即使该顶点只有 一个相邻顶点，我们也不得不迭代一整行。邻接矩阵表示法不够好的另一个理由是，图中顶点的 数量可能会改变，而2维数组不太灵活。</p><p>邻接表</p><p>我们也可以使用一种叫作邻接表的动态数据结构来表示图。邻接表由图中每个顶点的相邻顶 点列表所组成。存在好几种方式来表示这种数据结构。我们可以用列表（数组）、链表，甚至是 散列表或是字典来表示相邻顶点列表。下面的示意图展示了邻接表数据结构。</p><p>尽管邻接表可能对大多数问题来说都是更好的选择，但以上两种表示法都很有用，且它们有 着不同的性质（例如，要找出顶点V和W是否相邻，使用邻接矩阵会比较快)。在接下来的示例中， 我们将会使用邻接表表示法。</p><h4 id="guan-lian-ju-zhen" tabindex="-1"><a class="header-anchor" href="#guan-lian-ju-zhen">¶</a> 关联矩阵</h4><p>我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。如下图所 示，我们使用二维数组来表示两者之间的连通性，如果顶点 v 是边 e 的入射点，则 array[v][e] === 1; 否则，array [v][e] === 0。</p><p>​<img src="https://img-blog.csdnimg.cn/20181209172009355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>关联矩阵通常用于边的数量比顶点多的情况下，以节省空间和内存。</p><p>创建图类：</p>',39),mn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class Graph() { \n    constructor() { \n        this.vertices = [] \n        this.adjList = new Dictionary() \n    } \n    \n    // 添加顶点 \n    addVertex(v) { \n        this.vertices.push(v) \n        this.adjList.set(v, []) \n    } \n    \n    // 添加线 \n    addEdge(v, w) { \n        this.adjList.get(v).push(w) \n        this.adjList.get(w).push(v) \n    } \n    \n    toString() { \n        return this.vertices.reduce((r, v, i) => { \n            return this.adjList.get(v).reduce((r, w, i) => { \n                return r + `${w} ` \n            }, `${r}\\n${v} => `) \n        }, '') \n        \n    } \n    \n}\n")],-1),On=Object(i["o"])("p",null,"使用图类：",-1),fn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const graph = new Graph() \n;['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'].forEach(c => graph.addVertex(c)) \ngraph.addEdge('A', 'B') \ngraph.addEdge('A', 'C') \ngraph.addEdge('A', 'D') \ngraph.addEdge('C', 'D') \ngraph.addEdge('C', 'G') \ngraph.addEdge('D', 'G') \ngraph.addEdge('D', 'H') \ngraph.addEdge('B', 'E') \ngraph.addEdge('B', 'F') \ngraph.addEdge('E', 'I') console.log(graph.toString()) \n// 输出 \n/*\nA => B C D B => A E F C => A D G D => A C G H E => B I F => B G => C D H => D I => E \n*/\n")],-1),yn=Object(i["p"])('<h3 id="tu-de-bian-li" tabindex="-1"><a class="header-anchor" href="#tu-de-bian-li">¶</a> 图的遍历</h3><p>和树数据结构类似，我们可以访问图的所有节点。有两种算法可以对图进行遍历：</p><ul><li>广度优先搜索（Breadth-First Search，BFS)</li><li>深度优先搜索（Depth-First Search，DFS)</li></ul><p>图遍历可以用来寻找特定的顶点或寻找两个顶点之间的路径，检查图是否连通，检查图是否含有环等。</p><p>在实现算法之前，让我们来更好地理解一下图遍历的思想方法。</p><p>图遍历算法的思想是必须追踪每个第一次访问的节点，并且追踪有哪些节点还没有被完全探 索。对于两种图遍历算法，都需要明确指出第一个被访问的顶点。</p><p>完全探索一个顶点要求我们查看该顶点的每一条边。对于每一条边所连接的没有被访问过的 顶点，将其标注为被发现的，并将其加进待访问顶点列表中。</p><p>为了保证算法的效率，务必访问每个顶点至多两次。连通图中每条边和顶点都会被访问到。</p><p>广度优先搜索算法和深度优先搜索算法基本上是相同的，只有一点不同，那就是待访问顶点 列表的数据结构。</p><ul><li>深度优先搜索：桟，通过将顶点存入桟中，顶点是沿着路径被探索的，存在新的相邻顶点就去访问</li><li>广度优先搜索 ：队列，通过将顶点存入队列中，最先入队列的顶点先被探索</li></ul><h4 id="guang-du-you-xian-sou-suo" tabindex="-1"><a class="header-anchor" href="#guang-du-you-xian-sou-suo">¶</a> 广度优先搜索</h4><p>广度优先搜索算法会从指定的第一个顶点开始遍历图，先访问其所有的相邻点，就像一次访 问图的一层。简单说，就是先宽后深地访问顶点，如下图所示：</p><p>​<img src="https://img-blog.csdnimg.cn/2018120917221574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>以下是我们的方法实现的。</p><p>维护两个队列，分别用于存储已读和待读顶点，两者具有互斥性，即某顶点在访问时只会属于一种类型，本质是通过不断递归将相邻的顶点进行访问和维度标为已读。</p><p>让我们来实现广度优先搜索算法：</p>',16),xn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"// breadth first search \nbfs(v, callback) { \n    const read = [] \n    const adjList = this.adjList \n    let pending = [v || this.vertices[0]] \n    const readVertices = vertices => { \n        vertices.forEach(key => { \n            read.push(key) \n            pending.shift() \n            adjList.get(key).forEach(v => { \n                if (!pending.includes(v) && !read.includes(v)) { \n                    pending.push(v) \n                } \n            }) \n            if (callback) callback(key) \n            if (pending.length) readVertices(pending) \n        }) \n        \n    } \n    readVertices(pending) \n}\n")],-1),Fn=Object(i["o"])("p",null,"让我们执行下面这段代码来测试一下这个算法：",-1),kn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"graph.bfs(graph.vertices[0], value => console.log('Visited vertex: ' + value))\n")],-1),_n=Object(i["o"])("p",null,"输出结果：",-1),vn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"Visited vertex: A \nVisited vertex: B \nVisited vertex: C \nVisited vertex: D \nVisited vertex: E \nVisited vertex: F \nVisited vertex: G \nVisited vertex: H \nVisited vertex: I\n")],-1),zn=Object(i["o"])("p",null,"如你所见，顶点被访问的顺序和本节开头的示意图中所展示的一致。",-1),wn=Object(i["o"])("h4",{id:"shi-yong-bfsxun-zhao-zui-duan-lu-jing",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#shi-yong-bfsxun-zhao-zui-duan-lu-jing"},"¶"),Object(i["q"])(" 使用BFS寻找最短路径")],-1),Zn=Object(i["o"])("p",null,"到目前为止，我们只展示了BFS算法的工作原理。我们可以用该算法做更多事情，而不只是输出被访问顶点的顺序。例如，考虑如何来解决下面这个问题。",-1),Ln=Object(i["o"])("p",null,"给定一个图G和源顶点v，找出对每个顶点u，u和v之间最短路径的距离（以边的数量计)。",-1),Gn=Object(i["o"])("p",null,"对于给定顶点V，广度优先算法会访问所有与其距离为1的顶点，接着是距离为2的顶点，以此类推。所以，可以用广度优先算法来解这个问题。我们可以修改bfs方法以返回给我们一些信息：",-1),Vn=Object(i["o"])("ul",null,[Object(i["o"])("li",null,"从 v 到 u 的距离 d[u]"),Object(i["o"])("li",null,"前溯点 pred[u]，用来推导出从v到其他每个顶点u的最短路径")],-1),An=Object(i["o"])("p",null,"让我们来看看改进过的广度优先方法的实现：",-1),Nn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"bfs(v, callback) { \n    const read = [] \n    const distances = [] \n    const predecessors = [] \n    const adjList = this.adjList \n    const pending = [v || this.vertices[0]] \n    const readVertices = vertices => { \n        vertices.forEach(key => { \n            read.push(key) \n            pending.shift() \n            distances[key] = distances[key] || 0 \n            predecessors[key] = predecessors[key] || null \n            adjList.get(key).forEach(v => { \n                if (!pending.includes(v) && !read.includes(v)) { \n                    pending.push(v) \n                    distances[v] = distances[key] + 1 \n                    predecessors[v] = key \n                } \n            }) \n            if (callback) callback(key) \n            if (pending.length) readVertices(pending) \n        }) \n    } \n    readVertices(pending) \n    return { distances, predecessors } \n}\n")],-1),Hn=Object(i["o"])("p",null,"输出结果：",-1),Mn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},'distances: [A: 0, B: 1, C: 1, D: 1, E: 2, F: 2, G: 2, H: 2 ,工：3] \npredecessors: [A: null, B: "A", C: "A", D: "A", E: "B", F: " B", G: " C", H: "D", I: "E"]\n')],-1),qn=Object(i["o"])("p",null,"这意味着顶点A与顶点B、C和D的距离为1；与顶点E、F、G和H的距离为2；与顶点I的距离 通过前溯点数组，我们可以用下面这段代码来构建从顶点A到其他顶点的路径:",-1),En=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"distance(fromVertex) { \n    const vertices = this.vertices \n    const { distances, predecessors } = this.bfs(fromVertex) \n    vertices.forEach(toVertex => { \n        if (!!distances[toVertex]) { \n            let preVertex = predecessors[toVertex] \n            let slug = '' \n            while (fromVertex !== preVertex) { \n                slug = `${preVertex} - ${slug}` \n                preVertex = predecessors[preVertex] \n            }\n            slug = `${fromVertex} - ${slug}${toVertex}` \n            console.log(slug) \n        } \n    }) \n}\n")],-1),Sn=Object(i["o"])("p",null,"执行该代码段，我们会得到如下输出：",-1),Cn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"graph.distance(graph.vertices[0]) \n// 输出如下： \n// A - B \n// A - C \n// A - D \n// A - B - E \n// A - B - F \n// A - C - G \n// A - D - H \n// A - B - E - I\n")],-1),Tn=Object(i["o"])("p",null,"这里，我们得到了从顶点A到图中其他顶点的最短路径（衡量标准是边的数量)。",-1),Bn=Object(i["o"])("h4",{id:"shen-du-you-xian-sou-suo",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#shen-du-you-xian-sou-suo"},"¶"),Object(i["q"])(" 深度优先搜索")],-1),Rn=Object(i["o"])("p",null,"深度优先搜索算法将会从第一个指定的顶点开始遍历图，沿着路径直到这条路径最后一个顶 点被访问了，接着原路回退并探索下一条路径。换句话说，它是先深度后广度地访问顶点，如下图所示：",-1),Un=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209172533414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),Wn=Object(i["o"])("p",null,"深度优先搜索算法不需要一个源顶点。在深度优先搜索算法中，若图中顶点V未访问，则访问该顶点V。",-1),Dn=Object(i["o"])("p",null,"深度优先搜索算法核心是递归，普通的对象递归模型即可满足需求，对比已读顶点是否已完全覆盖即可。",-1),Jn=Object(i["o"])("p",null,"深度优先算法的实现：",-1),In=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"// depth first search \ndfs(callback) { \n    const read = [] \n    const adjList = this.adjList \n    const readVertices = vertices => { \n        vertices.forEach(key => { \n            if (read.includes(key)) return false \n            read.push(key) \n            if (callback) callback(key) \n            if (read.length !== this.vertices.length) { \n                readVertices(adjList.get(key)) \n            } \n        }) \n    } \n    readVertices(adjList.keys) \n}\n")],-1),Qn=Object(i["o"])("p",null,"让我们执行下面的代码段来测试一下df s方法：",-1),Pn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"graph.dfs(value => console.log('Visited vertex: ' + value)) \n// 输出如下： \n// Visited vertex: A \n// Visited vertex: B \n// Visited vertex: E \n// Visited vertex: I \n// Visited vertex: F \n// Visited vertex: C \n// Visited vertex: D \n// Visited vertex: G \n// Visited vertex: H\n")],-1),$n=Object(i["p"])('<p>下图展示了该算法每一步的执行过程：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209172618710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="tan-suo-shen-du-you-xian-suan-fa" tabindex="-1"><a class="header-anchor" href="#tan-suo-shen-du-you-xian-suan-fa">¶</a> 探索深度优先算法</h4><p>到目前为止，我们只是展示了深度优先搜索算法的工作原理。我们可以用该算法做更多的事 情，而不只是输出被访问顶点的顺序。</p><p>对于给定的图G，我们希望深度优先搜索算法遍历图G的所有节点，构建“森林”（有根树的 一个集合）以及一组源顶点（根)，并输出两个数组：发现时间和完成探索时间。我们可以修改 dfs方法来返回给我们一些信息：</p><ul><li>顶点 u 的发现时间 d[u]</li><li>当顶点 u 被标注为已读时，u 的完成探索时间</li><li>顶点 u 的前溯点 p[u]</li></ul><p>让我们来看看改进了的 DFS 方法的实现:</p>',7),Kn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"// depth first search \ndfs(callback) { \n    let readTimer = 0 \n    const read = [] \n    const readTimes = [] \n    const finishedTimes = [] \n    const predecessors = [] \n    const adjList = this.adjList \n    const readVertices = (vertices, predecessor) => { \n        vertices.forEach(key => { \n            readTimer++ \n            if (adjList.get(key).every(v => read.includes(v)) && !finishedTimes[key]) { \n                finishedTimes[key] = readTimer \n            } \n            if (read.includes(key)) return false \n            readTimes[key] = readTimer read.push(key) \n            if (callback) callback(key) \n            predecessors[key] = predecessors[key] || predecessor || null \n            if (read.length !== this.vertices.length) { \n                readVertices(adjList.get(key), key) \n            } \n        }) \n    } \n    readVertices(adjList.keys) \n    return { readTimes, finishedTimes, predecessors } \n}\n")],-1),Xn=Object(i["p"])('<p>深度优先算法背后的思想是什么？边是从最近发现的顶点 u 处被向外探索的。只有连接到未发现的顶点的边才会探索。当 u 所有的边都被探索了，该算法回退到 u 被发现的地方去探索其他的边。这个过程持续到我们发现了所有从原始顶点能够触及的顶点。如果还留有任何其他未被发现的顶点，我们对新源顶点重复这个过程，直到图中所有的顶点都被探索了。</p><p>对于改进过的深度优先搜索，有两点需要我们注意：</p><ul><li>时间（time）变量值的范围只可能在图顶点数量的一倍到两倍之间</li><li>对于所有的顶点 u，d[u] &lt; f[u] 意味着，发现时间的值比完成时间的值小，完成时所有顶点都已经被探索过了</li></ul><h3 id="er-suan-fa" tabindex="-1"><a class="header-anchor" href="#er-suan-fa">¶</a> 二、算法</h3><p>排序和搜索算法</p><p>假设我们有一个没有任何排列顺序的电话通讯录。当需要添加联络人和电话时，你只能将其写在下一个空位上。假定你的联系人列表上有很多人，某天，你要找某个联系人及其电话号码。但是由于联系人列表没有按照任何顺序来组织，你只能逐个检查，直到找到那个你想要的联系人为止。这个方法低效，我们需要在列表上搜寻一个联系人，但是那通讯录列表没有进行任何组织，那得花多久时间啊？！</p><p>因此（还有其他原因），我们需要组织信息集，比如那些存储在数据结构里的信息。排序和搜索算法广泛地运用在待解决的日常问题中。接下来，我会介绍最常用的排序和搜索算法。</p><h3 id="1.pai-xu-suan-fa" tabindex="-1"><a class="header-anchor" href="#1.pai-xu-suan-fa">¶</a> 1.排序算法</h3><h4 id="mou-pao-pai-xu" tabindex="-1"><a class="header-anchor" href="#mou-pao-pai-xu">¶</a> 冒泡排序</h4><p>人们开始学习排序算法时，通常都先学冒泡算法，因为它在所有排序算法中最简单。然而， 从运行时间的角度来看，冒泡排序是最差的一个，接下来你会知晓原因。</p><p>冒泡排序比较任何两个相邻的项，如果第一个比第二个大，则交换它们。元素项向上移动至 正确的顺序，就好像气泡升至表面一样，冒泡排序因此得名。</p><p>代码示例：</p>',12),Yn=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"Array.prototype.bubbleSort = function() { \n    for (let i = 0; i < this.length; i++) { \n        for (let j = 0; j < this.length - 1 - i; j++) { \n            if (this[j] > this[j + 1]) { \n                let aux = this[j] this[j] = this[j + 1] this[j + 1] = aux \n            } \n        } \n    } \n}\n")],-1),et=Object(i["o"])("p",null,"下图展示了冒泡排序算法的执行过程:",-1),nt=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209172910147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),tt=Object(i["o"])("p",null,"注：冒泡排序算法的复杂度是 O(n²)，并不推荐此算法。",-1),it=Object(i["o"])("h4",{id:"xuan-ze-pai-xu",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#xuan-ze-pai-xu"},"¶"),Object(i["q"])(" 选择排序")],-1),at=Object(i["o"])("p",null,"选择排序算法是一种原址比较排序算法。选择排序算法的思路是：找到数据结构中的最小值并 将其放置在第一位，接着找到第二小的值并将其放在第二位，以此类推。",-1),lt=Object(i["o"])("p",null,"代码示例：",-1),st=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"Array.prototype.selectionSort = function() { \n    let indexMin \n    for (let i = 0; i < this.length - 1; i++){ \n        indexMin = i \n        for (var j = i; j < this.length; j++){ \n            if(this[indexMin] > this[j]) { \n                indexMin = j \n            } \n        } \n        if (i !== indexMin){ \n            let aux = this[i] \n            this[i] = this[indexMin] \n            this[indexMin] = aux \n        } \n    } \n    return this \n}\n")],-1),ot=Object(i["o"])("p",null,"下图展示了选择排序算法的执行过程：",-1),rt=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209172958340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),ct=Object(i["o"])("h4",{id:"cha-ru-pai-xu",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#cha-ru-pai-xu"},"¶"),Object(i["q"])(" 插入排序")],-1),ut=Object(i["o"])("p",null,"插人排序每次排一个数组项，以此方式构建最后的排序数组。假定第一项已经排序了，接着， 它和第二项进行比较，第二项是应该待在原位还是插到第一项之前呢？这样，头两项就已正确排 序，接着和第三项比较（它是该插人到第一、第二还是第三的位置呢？），以此类推。",-1),pt=Object(i["o"])("p",null,"代码示例：",-1),ht=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"Array.prototype.insertionSort = function() { \n    let j \n    let temp \n    for (let i = 1; i < this.length; i++) { \n        j = i \n        temp = this[i] \n        while (j > 0 && this[j - 1] > temp) { \n            this[j] = this[j - 1] \n            j-- \n        } \n        this[j] = temp \n        console.log(this.join(', ')) \n    } \n    return this \n}\n")],-1),dt=Object(i["o"])("p",null,"下图展示了插人排序算法的执行过程:",-1),bt=Object(i["o"])("p",null,[Object(i["q"])("​"),Object(i["o"])("img",{src:"https://img-blog.csdnimg.cn/20181209173109955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"})],-1),gt=Object(i["o"])("p",null,"排序小型数组时，此算法比选择排序和冒泡排序性能要好。",-1),jt=Object(i["o"])("h4",{id:"gui-bing-pai-xu",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#gui-bing-pai-xu"},"¶"),Object(i["q"])(" 归并排序")],-1),mt=Object(i["o"])("p",null,"归并排序是第一个可以被实际使用的排序算法。前三个排序算法性能不好，但归并排序性能不错，其复杂度为O(n log^n)。",-1),Ot=Object(i["o"])("p",null,"JavaScript的Array类定义了一个sort函数Array.prototype.sort用以排序JavaScript数组（我们不必自己实现这个算法）。ECMAScript没有定义用哪个排序算法，所以浏览器厂商可以自行去实现算法。例如，Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而Chrome使用了一个快速排序的变体。",-1),ft=Object(i["o"])("p",null,"归并排序是一种分治算法。其思想是将原始数组切分成较小的数组，直到每个小数组只有一 个位置，接着将小数组归并成较大的数组，直到最后只有一个排序完毕的大数组。",-1),yt=Object(i["o"])("p",null,"由于是分治法，归并排序也是递归的：",-1),xt=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"Array.prototype.mergeSort = function() { \n    const merge = (left, right) => { \n        const result = [] \n        let il = 0 \n        let ir = 0 \n        while(il < left.length && ir < right.length) { \n            if(left[il] < right[ir]) { \n                result.push(left[il++]) \n            } else { \n                result.push(right[ir++]) \n            } \n        } \n        while (il < left.length) { \n            result.push(left[il++]) \n        } \n        while (ir < right.length) { \n            result.push(right[ir++]) \n        } \n        return result \n    } \n    const mergeSortRec = array => { \n        if (array.length === 1) { \n            return array \n        } \n        const mid = Math.floor(array.length / 2) \n        const left = array.slice(0, mid) \n        const right = array.slice(mid, array.length) \n        return merge(mergeSortRec(left), mergeSortRec(right)) \n    } \n    return mergeSortRec(this) \n}\n")],-1),Ft=Object(i["p"])('<p>下图展示了归并排序算法的执行过程:</p><p>​<img src="https://img-blog.csdnimg.cn/20181209173216216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到，算法首先将原始数组分割直至只有一个元素的子数组，然后开始归并。归并过程也会完成排序，直至原始数组完全合并并完成排序。</p><h4 id="kuai-su-pai-xu" tabindex="-1"><a class="header-anchor" href="#kuai-su-pai-xu">¶</a> 快速排序</h4><p>快速排序也许是最常用的排序算法了。它的复杂度为O(nlog^n)，且它的性能通常比其他的复杂度为O(nlog^n)的排序算法要好。和归并排序一样，快速排序也使用分治的方法，将原始数组分为较小的数组（但它没有像归并排序那样将它们分割开)。</p><p>快速排序的基本过程：</p><p>1.首先，从数组中选择中间一项作为主元<br> 2.创建两个指针，左边一个指向数组第一个项，右边一个指向数组最后一个项。移动左指 针直到我们找到一个比主元大的元素，接着，移动右指针直到找到一个比主元小的元素，然后交 换它们，重复这个过程，直到左指针超过了右指针。这个过程将使得比主元小的值都排在主元之 前，而比主元大的值都排在主元之后。这一步叫作划分操作。<br> 3.接着，算法对划分后的小数组（较主元小的值组成的子数组，以及较主元大的值组成的 子数组）重复之前的两个步骤，直至数组已完全排序。</p><p>代码示例：</p>',8),kt=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"Array.prototype.quickSort = function() {\n    const partition = (array, left, right) => {\n        var pivot = array[Math.floor((right + left) / 2)]\n        let i = left\n        let j = right\n        while (i <= j) {\n            while (array[i] < pivot) {\n                i++\n            }\n            while (array[j] > pivot) {\n                j--\n            }\n            if (i <= j) {\n                let aux = array[i]\n                array[i] = array[j]\n                array[j] = aux\n                i++\n                j--\n            }\n        }\n        return i\n    }\n    const quick = (array, left, right) => {\n        let index\n        if (array.length > 1) {\n            index = partition(array, left, right)\n            if (left < index - 1) {\n                quick(array, left, index - 1)\n            }\n            if (index < right) {\n                quick(array, index, right)\n            }\n        }\n    }\n    quick(this, 0, this.length - 1)\n    return this\n}\n")],-1),_t=Object(i["o"])("h3",{id:"2.sou-suo-suan-fa",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#2.sou-suo-suan-fa"},"¶"),Object(i["q"])(" 2.搜索算法")],-1),vt=Object(i["o"])("h4",{id:"shun-xu-sou-suo",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#shun-xu-sou-suo"},"¶"),Object(i["q"])(" 顺序搜索")],-1),zt=Object(i["o"])("p",null,"顺序或线性搜索是最基本的搜索算法。它的机制是，将每一个数据结构中的元素和我们要找的元素做比较。顺序搜索是最低效的一种搜索算法。",-1),wt=Object(i["o"])("p",null,"代码示例：",-1),Zt=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"Array.prototype.sequentialSearch = function(item) {\n    for (let i = 0; i < this.length; i++) {\n        if (item === this[i]) return i\n    }\n    return -1\n}\n")],-1),Lt=Object(i["p"])('<p>假定有数组[5, 4, 3, 2, 1]要搜索值3，下图展示了顺序搜索算法的执行过程：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209173412221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="er-fen-sou-suo" tabindex="-1"><a class="header-anchor" href="#er-fen-sou-suo">¶</a> 二分搜索</h4><p>二分搜索算法的原理和猜数字游戏类似，就是那个有人说&quot;我正想着一个1到100的数字&quot;的游戏。我们每回应一个数字，那个人就会说这个数字是高了、低了还是对了。</p><p>这个算法要求被搜索的数据结构已排序，以下是该算法遵循的步骤：</p><ul><li>选择数组的中间值</li><li>如果选中值是待搜索值，算法执行完毕（值找到了）</li><li>如果待搜索值比选中值要小，则返回步骤1并在选中值左边的子数组中寻找</li><li>如果待搜索值比选中值要大，则返回步骤1并在选种值右边的子数组中寻找</li></ul><p>代码实例：</p>',7),Gt=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"Array.prototype.binarySearch = function(item) {\n    this.quickSort()\n    let low = 0\n    let mid = null\n    let element = null\n    let high = this.length - 1\n    while (low <= high){\n        mid = Math.floor((low + high) / 2)\n        element = this[mid]\n        if (element < item) {\n            low = mid + 1\n        } else if (element > item) {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return -1\n}\n")],-1),Vt=Object(i["p"])('<p>图展示了二分搜索算法的执行过程：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209173549714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们实现的BinarySearchTree类有一个search方法，和这个二分搜索完全一样，只不过它是针对树数据结构的。</p><h3 id="suan-fa-bu-chong-zhi-shi" tabindex="-1"><a class="header-anchor" href="#suan-fa-bu-chong-zhi-shi">¶</a> 算法补充知识</h3><h4 id="fei-bo-na-qi-shu-lie" tabindex="-1"><a class="header-anchor" href="#fei-bo-na-qi-shu-lie">¶</a> 斐波那契数列</h4><p>斐波那契数列的定义如下：</p><ul><li>1和2的斐波那契数是1</li><li>n(n &gt; 2) 的斐波那契数是 (n-1)的斐波那契数 + n(n-2)的斐波那契数</li></ul><p>代码示例：</p>',8),At=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"function fibonacci(num) { \n    if (num === 1 || num === 2) { \n        return 1\n    }\n    return fibonacci(num - 1) + fibonacci(num - 2)\n}\n")],-1),Nt=Object(i["p"])('<p>假设需要计算数字6的斐波那契值，则计算过程如下图：</p><p>​<img src="https://img-blog.csdnimg.cn/20181209173728221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NwcmluZzU1MzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="dong-tai-gui-hua" tabindex="-1"><a class="header-anchor" href="#dong-tai-gui-hua">¶</a> 动态规划</h4><p>动态规划（Dynamic Programming，DP)是一种将复杂问题分解成更小的子问题来解决的优化技术。</p><p>上面提到过几次动态规划技术。用动态规划解决的一个问题是图搜索中的深度优先搜索。 要注意动态规划和分而治之（归并排序和快速排序算法中用到的那种）是不同的方法。分而治之方法是把问题分解成相互独立的子问题，然后组合它们的答案，而动态规划则是将问题分解成相互依赖的子问题。 另一个例子是上一节解决的斐波那契问题。我们将斐波那契问题分解成如该节图示的小问题。</p><p>用动态规划解决问题时，要遵循三个重要步骤：</p><p>1.定义子问题<br> 2.实现要反复执行而解决子问题的部分（可能是递归）<br> 3.识别并求解出边界条件</p><p>能用动态规划解决的一些著名的问题如下：</p><ul><li>背包问题：给出一组项目，各自有值和容量，目标是找出总值最大的项目的集合。这个 问题的限制是，总容量必须小于等于“背包”的容量</li><li>最长公共子序列：找出一组序列的最长公共子序列（可由另一序列删除元素但不改变余 下元素的顺序而得到）</li><li>矩阵链相乘：给出一系列矩阵，目标是找到这些矩阵相乘的最高效办法（计算次数尽可能少)，相乘操作不会进行，解决方案是找到这些矩阵各自相乘的顺序</li><li>硬币找零：给出面额为 d1...dn 的一定数量的硬币和要找零的钱数，找出有多少种找零的方法</li><li>图的全源最短路径：对所有顶点对(u, v)，找出从顶点u到顶点v的最短路径。</li></ul><p>接下来的例子，涉及硬币找零问题的一个变种。</p><p>最少硬币找零问题是硬币找零问题的一个变种。硬币找零问题是给出要找零的钱数，以及可 用的硬币面额 d1...dn 及其数量，找出有多少种找零方法。最少硬币找零问题是给出要找零的钱数， 以及可用的硬币面额 d1...dn 及其数量，找到所需的最少的硬币个数。</p><p>例如，美国有以下面额(硬币）：d1=1, d2=5, d3=10, d4=25，如果要找36美分的零钱，我们可以用1个25美分、1个10美分和1个便士（ 1美分)。</p><p>如何将这个解答转化成算法？</p><p>最少硬币找零的解决方案是找到 n 所需的最小硬币数。但要做到这一点，首先得找到对每个 x &lt; n 的解。然后，我们将解建立在更小的值的解的基础上。</p><p>来看看算法：</p>',15),Ht=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class MinCoinChange {\n\n    constructor(coins) {\n        this.coins = coins\n        this.cache = {}\n    }\n\n    makeChange(amount) {\n        if (!amount) return []\n        if (this.cache[amount]) return this.cache[amount]\n        let min = [], newMin, newAmount\n        this.coins.forEach(coin => {\n            newAmount = amount - coin\n            if (newAmount >= 0) {\n                newMin = this.makeChange(newAmount)\n            }\n            if (newAmount >= 0 && \n                 (newMin.length < min.length - 1 || !min.length) && \n                 (newMin.length || !newAmount)) {\n                min = [coin].concat(newMin)\n            }\n        })\n        return (this.cache[amount] = min)\n    }\n}\n")],-1),Mt=Object(i["o"])("p",null,"测试一下算法：",-1),qt=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const rninCoinChange = new MinCoinChange([1, 5, 10, 25])\nconsole.log(minCoinChange.makeChange(36))\n// [1, 10, 25]\nconst minCoinChange2 = new MinCoinChange([1, 3, 4])\nconsole.log(minCoinChange2.makeChange(6))\n// [3, 3]\n")],-1),Et=Object(i["o"])("p",null,"所以，找零钱数为6时，最佳答案是两枚价值为3的硬币",-1),St=Object(i["o"])("h4",{id:"tan-xin-suan-fa",tabindex:"-1"},[Object(i["o"])("a",{class:"header-anchor",href:"#tan-xin-suan-fa"},"¶"),Object(i["q"])(" 贪心算法")],-1),Ct=Object(i["o"])("p",null,"贪心算法遵循一种近似解决问题的技术，期盼通过每个阶段的局部最优选择（当前最好的 解），从而达到全局的最优（全局最优解)。它不像动态规划那样计算更大的格局。",-1),Tt=Object(i["o"])("p",null,"最少硬币找零问题也能用贪心算法解决。大部分情况的结果是最优的，不过对有些面额而言， 结果不会是最优的。",-1),Bt=Object(i["o"])("p",null,"来看看算法：",-1),Rt=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"class MinCoinChange {\n\n    constructor(coins) {\n        this.coins = coins\n    }\n\n    makeChange(amount) {\n        const change = []\n        let total = 0\n        this.coins.sort((a, b) => a < b).forEach(coin => {\n            while ((total + coin) <= amount) {\n                change.push(coin)\n                total += coin\n            }\n        })\n        return change\n    }\n}\n")],-1),Ut=Object(i["o"])("p",null,"贪心算法版本的这个解法很简单。从最大面额的硬币开始，拿尽可能多的这种硬币找零。当无法 再拿更多这种价值的硬币时，开始拿第二大价值的硬币，依次继续。 用和DP方法同样的测试代码测试：",-1),Wt=Object(i["o"])("pre",null,[Object(i["o"])("code",{class:"language-javascript"},"const rninCoinChange = new MinCoinChange ( [ 1, 5, 10, 2 5])\nconsole. log (rninCoinChange. rnakeChange (36))\n")],-1),Dt=Object(i["o"])("p",null,"结果依然是[25, 10, 1]，和用DP得到的一样。下图阐释了算法的执行过程：",-1),Jt=Object(i["o"])("p",null,"然而，如果用[1, 3, 4]面额执行贪心算法，会得到结果[4, 1, 1]。如果用动态规划的 解法，会得到最优的结果[3, 3]。",-1),It=Object(i["o"])("p",null,"比起动态规划算法而言，贪心算法更简单、更快。然而，如我们所见，它并不总是得到最优 答案。但是综合来看，它相对执行时间来说，输出了一个可以接受的解。",-1),Qt=Object(i["o"])("p",null,"​",-1);function Pt(e,n){const t=Object(i["T"])("code-viewer");return Object(i["K"])(),Object(i["n"])("section",a,[l,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[s]),_:1}),o,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[r]),_:1}),c,u,p,h,d,b,g,j,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[m]),_:1}),O,f,y,x,F,k,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[_]),_:1}),v,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[z]),_:1}),w,Z,L,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[G]),_:1}),V,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[A]),_:1}),N,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[H]),_:1}),M,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[q]),_:1}),E,S,C,T,B,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[R]),_:1}),U,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[W]),_:1}),D,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[J]),_:1}),I,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Q]),_:1}),P,$,K,X,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Y]),_:1}),ee,ne,te,ie,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[ae]),_:1}),le,se,oe,re,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[ce]),_:1}),ue,pe,he,de,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[be]),_:1}),ge,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[je]),_:1}),me,Oe,fe,ye,xe,Fe,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[ke]),_:1}),_e,ve,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[ze]),_:1}),we,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Ze]),_:1}),Le,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Ge]),_:1}),Ve,Ae,Ne,He,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Me]),_:1}),qe,Ee,Se,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Ce]),_:1}),Te,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Be]),_:1}),Re,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Ue]),_:1}),We,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[De]),_:1}),Je,Ie,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Qe]),_:1}),Pe,$e,Ke,Xe,Ye,en,nn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[tn]),_:1}),an,ln,sn,on,rn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[cn]),_:1}),un,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[pn]),_:1}),hn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[dn]),_:1}),bn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[gn]),_:1}),jn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[mn]),_:1}),On,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[fn]),_:1}),yn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[xn]),_:1}),Fn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[kn]),_:1}),_n,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[vn]),_:1}),zn,wn,Zn,Ln,Gn,Vn,An,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Nn]),_:1}),Hn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Mn]),_:1}),qn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[En]),_:1}),Sn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Cn]),_:1}),Tn,Bn,Rn,Un,Wn,Dn,Jn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[In]),_:1}),Qn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Pn]),_:1}),$n,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Kn]),_:1}),Xn,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Yn]),_:1}),et,nt,tt,it,at,lt,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[st]),_:1}),ot,rt,ct,ut,pt,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[ht]),_:1}),dt,bt,gt,jt,mt,Ot,ft,yt,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[xt]),_:1}),Ft,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[kt]),_:1}),_t,vt,zt,wt,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Zt]),_:1}),Lt,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Gt]),_:1}),Vt,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[At]),_:1}),Nt,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Ht]),_:1}),Mt,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[qt]),_:1}),Et,St,Ct,Tt,Bt,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Rt]),_:1}),Ut,Object(i["r"])(t,null,{default:Object(i["hb"])(()=>[Wt]),_:1}),Dt,Jt,It,Qt])}var $t=t("6b0d"),Kt=t.n($t);const Xt={},Yt=Kt()(Xt,[["render",Pt]]);n["default"]=Yt}}]);