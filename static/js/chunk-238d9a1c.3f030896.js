(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-238d9a1c"],{b9a6:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t)=>{const n=e.__vccOpts||e;for(const[l,a]of t)n[l]=a;return n}},d7df:function(e,t,n){"use strict";n.r(t);var l=n("f2bf");const a={class:"blog-doc-component"},c=Object(l["createElementVNode"])("h1",null,"自定义webpack-loader",-1),o=Object(l["createElementVNode"])("p",null,[Object(l["createTextVNode"])("看到这篇文章必然是对webpack有一定的了解，因为webpack本身只支持js和json文件，不需要任何的解析处理。"),Object(l["createElementVNode"])("br"),Object(l["createTextVNode"])(" webpack官方提供了一些常用的loader，比如ref-loader、babel-loader、less-loader等等，那么如何自定义loader？"),Object(l["createElementVNode"])("br"),Object(l["createTextVNode"])(" 本文就拿replace-loader为例来实现")],-1),r=Object(l["createElementVNode"])("h2",{id:"ji-ben",tabindex:"-1"},[Object(l["createElementVNode"])("a",{class:"header-anchor",href:"#ji-ben"},"¶"),Object(l["createTextVNode"])(" 基本")],-1),d=Object(l["createElementVNode"])("p",null,"Webpack loader是一个CommonJs风格的函数，接收输入的源码，通过同步或异步的方式替换源码后进行输出。",-1),s=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"module.exports = function(source, sourceMap, meta) {\n  \n}\n")],-1),u=Object(l["createElementVNode"])("ul",null,[Object(l["createElementVNode"])("li",null,[Object(l["createElementVNode"])("p",null,"source是输入的内容")]),Object(l["createElementVNode"])("li",null,[Object(l["createElementVNode"])("p",null,"sourceMap是可选的")]),Object(l["createElementVNode"])("li",null,[Object(l["createElementVNode"])("p",null,"meta是模块的元数据，也是可选的")])],-1),b=Object(l["createElementVNode"])("p",null,[Object(l["createTextVNode"])("需要注意的是，该导出函数必须使用function，不能使用箭头函数，因为loader编写过程中会经常使用到 "),Object(l["createElementVNode"])("code",null,"this"),Object(l["createTextVNode"])(" 访问选项和其他方法。")],-1),j=Object(l["createElementVNode"])("p",null,"我们先编写一个基本的Loader，完成的工作很简单，那就是把输出的字符串进行替换。",-1),i=Object(l["createElementVNode"])("p",null,"1.新建loader-example目录，执行npm初始化，并安装webpack",-1),p=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-bash"},"mkdir loader-example\ncd loadeer-example\nnpm init -y\nnpm install webpack webpack-cli\n")],-1),m=Object(l["createElementVNode"])("p",null,"2.构建项目目录",-1),O=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-jboss-cli"},"|----loader # loader目录\n        |----replace-loader.js # 替换字符串的Loader\n|----src   # 应用源码\n        |----index.js # 首页\n|----package.json\n|----webpack.config.js\n")],-1),N=Object(l["createElementVNode"])("p",null,"3.编写loader/replace-loader.js",-1),V=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"module.exports = function(source) {\n  return source.replace(/World/g, 'Loader');\n};\n")],-1),E=Object(l["createElementVNode"])("p",null,"本例中我们Loader只是简单的将源码中的”World“替换成了”Loader“。",-1),g=Object(l["createElementVNode"])("p",null,"4.编写src/index.js",-1),h=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"console.log('Hello World');\n")],-1),x=Object(l["createElementVNode"])("p",null,"5.编写webpack.config.js",-1),f=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"const path = require('path');\n\nmodule.exports = {\n  entry: './src/index',\n  target: 'node', // 我们编译为Node.js环境下的JS，等下直接使用Node.js执行编译完成的文件\n  output:{\n    path: path.resolve(__dirname, 'build'),\n    filename: '[name].js'\n  },\n  module:{\n    rules:[\n      {\n        test:/\\.js$/,\n        use: 'replace-loader'\n      }\n    ]\n  },\n  resolveLoader: {\n      modules: ['./node_modules', './loader'] // 配置loader的查找目录\n  }\n};\n")],-1),w=Object(l["createElementVNode"])("p",null,"6.编写package.json",-1),k=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-json"},'{\n  "scripts":{\n    "build":"webpack"\n  }\n}\n')],-1),_=Object(l["createElementVNode"])("p",null,"7.执行构建",-1),v=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-bash"},"npm run build\n")],-1),C=Object(l["createElementVNode"])("p",null,"8.构建完成后，执行build/main.js",-1),L=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-bash"},"node build/main.js\n")],-1),T=Object(l["createElementVNode"])("p",null,"此时终端输出如下，我们编写的Loader工作正常。",-1),W=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-ebnf"},"Hello Loader\n")],-1),y=Object(l["createElementVNode"])("h2",{id:"loaderxuan-xiang",tabindex:"-1"},[Object(l["createElementVNode"])("a",{class:"header-anchor",href:"#loaderxuan-xiang"},"¶"),Object(l["createTextVNode"])(" Loader选项")],-1),q=Object(l["createElementVNode"])("p",null,"我们使用第三方loader时经常可以看到传递选项的情况：",-1),z=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"{\n  test:/\\.js$/,\n  use:[\n    {\n      loader:'babel-loader',\n      options:{\n        plugins:['@babel/transform-runtime'],\n        presets:['@babel/env']\n      }\n    }\n  ]\n}\n")],-1),B=Object(l["createElementVNode"])("p",null,"在Loader编写时，Webpack中官方推荐通过loader-utils来读取配置选项，我们需要先安装。",-1),H=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-bash"},"npm install loader-utils\n")],-1),M=Object(l["createElementVNode"])("p",null,"我们给刚才编写的replace-loader传递一个选项，允许自定义替换结果。",-1),S=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"const loaderUtils = require('loader-utils');\n\nmodule.exports = function(source) {\n    const options = loaderUtils.getOptions(this);\n  return source.replace(/World/g, options.text);\n};\n")],-1),U=Object(l["createElementVNode"])("p",null,"接下来编辑webpack.config.js，给replace-loader传递选项。",-1),$=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"module.exports = {\n  module:{\n    rules:[\n      {\n        test:/\\.js$/,\n        use:[\n          {\n            loader:'replace-loader',\n            options:{\n              text: 'Webpack4'\n            }\n          }\n        ]\n      }\n    ]\n  },\n  resolveLoader:{\n    modules: ['./node_modules', './loader']\n  }\n};\n")],-1),J=Object(l["createElementVNode"])("p",null,"执行构建之后用Node.js执行build/main.js，可以看到输出的内容已经发生变化了。",-1),F=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-nginx"},"Hello Webpack4\n")],-1),P=Object(l["createElementVNode"])("h2",{id:"yi-bu-loader",tabindex:"-1"},[Object(l["createElementVNode"])("a",{class:"header-anchor",href:"#yi-bu-loader"},"¶"),Object(l["createTextVNode"])(" 异步Loader")],-1),R=Object(l["createElementVNode"])("p",null,"在Loader中，如果存在异步调用，那么就无法直接通过return返回构建后的结果了，此时需要使用到Webpack提供的回调函数将数据进行回调。",-1),A=Object(l["createElementVNode"])("p",null,[Object(l["createTextVNode"])("Webpack4给Loader提供了 "),Object(l["createElementVNode"])("code",null,"this.async()"),Object(l["createTextVNode"])(" 函数，调用之后返回一个callback，callback的签名如下:")],-1),D=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"function callback(\n  err: Error|null,\n  content: string|Buffer,\n  sourceMap?:SourceMap,\n  meta?: any\n)\n")],-1),G=Object(l["createElementVNode"])("p",null,"例如我们需要在loader中调用setTimeout进行等待，则相应的代码如下：",-1),I=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",null,"       {\nconst output = source.replace(/World/g, 'Webpack4');\ncallback(null, output);\n")],-1),K=Object(l["createElementVNode"])("p",null,'}, 1000); }" title="" data-bs-original-title="复制" aria-label="复制">',-1),Q=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"module.exports = function(source) {\n  const callback = this.async();\n  setTimeout(() => {\n    const output = source.replace(/World/g, 'Webpack4');\n    callback(null, output);\n  }, 1000);\n}\n")],-1),X=Object(l["createElementVNode"])("p",null,"执行构建，Webpack会等待一秒，然后再输出构建内容，通过Node.js执行构建后的文件，输出如下",-1),Y=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-nginx"},"Hello Webpack4\n")],-1),Z=Object(l["createElementVNode"])("h2",{id:"raw-loader",tabindex:"-1"},[Object(l["createElementVNode"])("a",{class:"header-anchor",href:"#raw-loader"},"¶"),Object(l["createTextVNode"])(' "Raw" Loader')],-1),ee=Object(l["createElementVNode"])("p",null,[Object(l["createTextVNode"])("默认情况下，资源文件会被转化为 UTF-8 字符串，然后传给 loader。通过设置 "),Object(l["createElementVNode"])("code",null,"raw"),Object(l["createTextVNode"])(" ，loader 可以接收原始的 "),Object(l["createElementVNode"])("code",null,"Buffer"),Object(l["createTextVNode"])(" 。比如处理非文本文件时(如图片等等)。")],-1),te=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"module.exports = function(source) {\n  assert(source instanceof Buffer);\n  return someSyncOperation(source);\n};\nmodule.exports.raw = true; // 设置当前Loader为raw loader, webpack会将原始的Buffer对象传入\n")],-1),ne=Object(l["createStaticVNode"])('<h2 id="du-qu-loaderpei-zhi-wen-jian" tabindex="-1"><a class="header-anchor" href="#du-qu-loaderpei-zhi-wen-jian">¶</a> 读取loader配置文件</h2><p>babel-loader在使用时可以加载.babelrc配置文件来配置plugins和presets，减少了webpack.config.js的代码量，便于维护。接下来我们编写一个i18n-loader，通过读取语言配置文件完成语言转换。</p><h3 id="xiang-mu-jie-gou" tabindex="-1"><a class="header-anchor" href="#xiang-mu-jie-gou">¶</a> 项目结构</h3><pre><code class="language-jboss-cli">|----loader\n        |----i18n-loader.js # loader\n|----i18n\n        |----zh.json # 中文语言包\n|----src\n        |----index.js # 入口文件\n|----webpack.config.js\n</code></pre><p>i18n/zh.json</p>',5),le=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-json"},'{\n    "hello": "你好",\n    "today": "今天"\n}\n')],-1),ae=Object(l["createElementVNode"])("p",null,"loader/i18n-loader.js",-1),ce=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"const loaderUtils = require('loader-utils');\nconst path = require('path');\n\nmodule.exports = function (source) {\n    const options = loaderUtils.getOptions(this);\n    const locale = options ? options.locale : null;\n\n    // 读取语言配置文件\n    let json = null;\n    if (locale) {\n        const filename = path.resolve(__dirname, '..', 'i18n', `${locale}.json`);\n        json = require(filename);\n    }\n\n    // 读取语言标记 {{}}\n    const matches = source.match(/\\{\\{\\w+\\}\\}/g); \n    for (const match of matches) {\n        const name = match.match(/\\{\\{(\\w+)\\}\\}/)[1].toLowerCase();\n        if (json !== null &amp;&amp; json[name] !== undefined) {\n            source = source.replace(match, json[name]);\n        } else {\n            source = source.replace(match, name);\n        }\n    }\n    return source;\n}\n")],-1),oe=Object(l["createElementVNode"])("p",null,"src/index.js",-1),re=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"console.log('{{Hello}}, {{Today}} is a good day.');\n")],-1),de=Object(l["createElementVNode"])("p",null,"webpack.config.js",-1),se=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-javascript"},"const path = require('path');\n\nmodule.exports = {\n    entry: './src/index',\n    output: {\n        path: path.resolve(__dirname, 'build'),\n        filename: '[name].js'\n    },\n    target: 'node',\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: [\n                    {\n                        loader: 'i18n-loader',\n                        options: { // 传递选项\n                            locale: 'zh'\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    resolveLoader: {\n        modules: ['./node_modules', './loader']\n    }\n};\n")],-1),ue=Object(l["createElementVNode"])("p",null,"package.json",-1),be=Object(l["createElementVNode"])("pre",null,[Object(l["createElementVNode"])("code",{class:"language-json"},'{\n  "scripts":{\n    "build":"webpack"\n  }\n}\n')],-1),je=Object(l["createStaticVNode"])('<h3 id="zhi-xing-gou-jian" tabindex="-1"><a class="header-anchor" href="#zhi-xing-gou-jian">¶</a> 执行构建</h3><pre><code class="language-routeros">npm run build\n</code></pre><p>构建完毕后使用Node.js执行build/main.js输出如下：</p><pre><code class="language-applescript">你好, 今天 is a good day.\n</code></pre><p>可以看到i18n-loader成功读取了配置文件。</p><h2 id="xiao-jie" tabindex="-1"><a class="header-anchor" href="#xiao-jie">¶</a> 小结</h2><p>本文简要介绍了Webpack中如何编写一个自定义的loader，权当抛砖引玉，更多的用法等待读者在实际工作中去挖掘，要想掌握Webpack的高级知识，Loader是必不可少的技能，有时候如果社区找不到合适的Loader，大家可以根据需要自己进行开发。</p>',7),ie=Object(l["createElementVNode"])("img",{src:"/img/remote/1460000021980127",alt:"0",title:"0"},null,-1);function pe(e,t){const n=Object(l["resolveComponent"])("code-viewer"),pe=Object(l["resolveComponent"])("image-viewer");return Object(l["openBlock"])(),Object(l["createElementBlock"])("section",a,[c,o,r,d,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[s]),_:1}),u,b,j,i,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[p]),_:1}),m,O,N,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[V]),_:1}),E,g,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[h]),_:1}),x,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[f]),_:1}),w,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[k]),_:1}),_,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[v]),_:1}),C,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[L]),_:1}),T,W,y,q,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[z]),_:1}),B,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[H]),_:1}),M,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[S]),_:1}),U,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[$]),_:1}),J,F,P,R,A,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[D]),_:1}),G,I,K,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[Q]),_:1}),X,Y,Z,ee,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[te]),_:1}),ne,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[le]),_:1}),ae,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[ce]),_:1}),oe,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[re]),_:1}),de,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[se]),_:1}),ue,Object(l["createVNode"])(n,null,{default:Object(l["withCtx"])(()=>[be]),_:1}),je,Object(l["createElementVNode"])("p",null,[Object(l["createVNode"])(pe,{url:"/img/remote/1460000021980127"},{default:Object(l["withCtx"])(()=>[ie]),_:1})])])}var me=n("b9a6"),Oe=n.n(me);const Ne={},Ve=Oe()(Ne,[["render",pe]]);t["default"]=Ve}}]);